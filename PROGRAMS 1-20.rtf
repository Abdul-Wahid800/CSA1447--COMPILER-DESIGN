{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi0\deflang16393\deflangfe16393\themelang16393\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}
{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0302020204030204}Calibri Light;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1280\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f1281\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f1283\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f1284\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f1285\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f1286\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f1287\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f1288\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f1620\fbidi \froman\fcharset238\fprq2 Cambria Math CE;}{\f1621\fbidi \froman\fcharset204\fprq2 Cambria Math Cyr;}{\f1623\fbidi \froman\fcharset161\fprq2 Cambria Math Greek;}{\f1624\fbidi \froman\fcharset162\fprq2 Cambria Math Tur;}
{\f1627\fbidi \froman\fcharset186\fprq2 Cambria Math Baltic;}{\f1628\fbidi \froman\fcharset163\fprq2 Cambria Math (Vietnamese);}{\f1650\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\f1651\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}
{\f1653\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f1654\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\f1655\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\f1656\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}
{\f1657\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\f1658\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Calibri Light CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Calibri Light Cyr;}{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Calibri Light Greek;}
{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Calibri Light Tur;}{\fhimajor\f31533\fbidi \fswiss\fcharset177\fprq2 Calibri Light (Hebrew);}{\fhimajor\f31534\fbidi \fswiss\fcharset178\fprq2 Calibri Light (Arabic);}
{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Calibri Light Baltic;}{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Calibri Light (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31573\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\fhiminor\f31574\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green0\blue0;\red0\green0\blue0;}{\*\defchp \fs24\kerning2\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap 
\ql \li0\ri0\sa160\sl278\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa160\sl278\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang16393\langfe16393\kerning2\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp16393\langfenp16393 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa160\sl278\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang16393\langfe16393\kerning2\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp16393\langfenp16393 
\snext11 \ssemihidden \sunhideused Normal Table;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid354400\rsid409140\rsid3873325\rsid4596008\rsid5786600\rsid10617486\rsid11276533\rsid12075212\rsid16196572}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0
\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\operator Abdul Wahid}{\creatim\yr2025\mo2\dy25\hr11\min25}{\revtim\yr2025\mo3\dy2\hr14\min21}{\version3}{\edmins59}{\nofpages71}{\nofwords5632}{\nofchars32106}{\nofcharsws37663}{\vern113}}
{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\rsidroot10617486 \nouicompat \fet0{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\sa200\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid3873325 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 
\fs24\lang16393\langfe16393\kerning2\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp16393\langfenp16393 {\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\lang9\langfe16393\kerning0\langnp9\insrsid354400\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 
Exp. No. 1 }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\lang9\langfe16393\kerning0\langnp9\insrsid16196572\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 
\b\f0\fs28\lang9\langfe16393\kerning0\langnp9\insrsid354400\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Develop a lexical Analyzer to identify identifiers, constants, operators using C program.}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 
\b\f0\fs28\lang9\langfe16393\kerning0\langnp9\insrsid354400 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\lang9\langfe16393\kerning0\langnp9\insrsid3873325\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid354400\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include <stdio.h>
\par \hich\af0\dbch\af31505\loch\f0 #include <ctype.h>}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid11276533\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid354400\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include <string.h>
\par \hich\af0\dbch\af31505\loch\f0 #define MAX_LEN 100
\par \hich\af0\dbch\af31505\loch\f0 int is_identifier(char *str) \{
\par \hich\af0\dbch\af31505\loch\f0     if (isalpha(str[0]) || str[0] == '_') \{ 
\par \hich\af0\dbch\af31505\loch\f0         for (int i = 1; str[i] != '\\0'; i++) \{
\par \hich\af0\dbch\af31505\loch\f0             if (!isalnum(str[i]) && str[i] != '_') \{ 
\par \hich\af0\dbch\af31505\loch\f0                 return 0; 
\par \hich\af0\dbch\af31505\loch\f0             \}
\par \hich\af0\dbch\af31505\loch\f0         \}
\par \hich\af0\dbch\af31505\loch\f0         return 1;
\par \hich\af0\dbch\af31505\loch\f0     \}
\par \hich\af0\dbch\af31505\loch\f0     return 0;
\par \}
\par \hich\af0\dbch\af31505\loch\f0 int is_constant(char *str) \{
\par \hich\af0\dbch\af31505\loch\f0     for (int i = 0; str[i] != '\\0'; i++) \{
\par \hich\af0\dbch\af31505\loch\f0         if (!isdigit(str[i])) \{ 
\par \hich\af0\dbch\af31505\loch\f0             return 0;
\par \hich\af0\dbch\af31505\loch\f0         \}
\par \hich\af0\dbch\af31505\loch\f0     \}
\par \hich\af0\dbch\af31505\loch\f0     return 1;
\par \}
\par \hich\af0\dbch\af31505\loch\f0 int is_operator(char c) \{
\par \hich\af0\dbch\af31505\loch\f0     return (c == '+' || c == '-' || c == '*' || c == '/' || c == '=' || c == '<' || c == '>' || c == '%');
\par \}
\par \hich\af0\dbch\af31505\loch\f0 void analyze(char *input) \{
\par \hich\af0\dbch\af31505\loch\f0     char token[MAX_LEN];
\par \hich\af0\dbch\af31505\loch\f0     int i = 0, j = 0;
\par \hich\af0\dbch\af31505\loch\f0 while (input[i] != '\\0') \{
\par \hich\af0\dbch\af31505\loch\f0         // Skip white spaces
\par \hich\af0\dbch\af31505\loch\f0         if (isspace(input[i])) \{
\par \hich\af0\dbch\af31505\loch\f0             i++;
\par \hich\af0\dbch\af31505\loch\f0             continue;
\par \hich\af0\dbch\af31505\loch\f0         \}
\par \hich\af0\dbch\af31505\loch\f0 if (isalpha(input[i]) || input[i] == '_') \{
\par \hich\af0\dbch\af31505\loch\f0             j = 0;
\par \hich\af0\dbch\af31505\loch\f0             while (isalnum(input[i]) || input[i] == '_') \{
\par \hich\af0\dbch\af31505\loch\f0                 token[j++] = input[i++];
\par \hich\af0\dbch\af31505\loch\f0             \}
\par \hich\af0\dbch\af31505\loch\f0             token[j] = '\\0';
\par \hich\af0\dbch\af31505\loch\f0             if (is_identifier(token)) \{
\par \hich\af0\dbch\af31505\loch\f0                 printf("Identifier: %s\\n", token);
\par \hich\af0\dbch\af31505\loch\f0             \}
\par \hich\af0\dbch\af31505\loch\f0         \}
\par \hich\af0\dbch\af31505\loch\f0         else if (isdigit(input[i])) \{
\par \hich\af0\dbch\af31505\loch\f0             j = 0;
\par \hich\af0\dbch\af31505\loch\f0      \hich\af0\dbch\af31505\loch\f0 while (isdigit(input[i])) \{
\par \hich\af0\dbch\af31505\loch\f0                 token[j++] = input[i++];
\par \hich\af0\dbch\af31505\loch\f0             \}
\par \hich\af0\dbch\af31505\loch\f0             token[j] = '\\0';
\par \hich\af0\dbch\af31505\loch\f0             if (is_constant(token)) \{
\par \hich\af0\dbch\af31505\loch\f0                 printf("Constant: %s\\n", token);
\par \hich\af0\dbch\af31505\loch\f0             \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid11276533\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid354400\charrsid3873325 \}
\par \hich\af0\dbch\af31505\loch\f0         else if (is_operator(input[i])) \{
\par \hich\af0\dbch\af31505\loch\f0             printf("Operator: %c\\n", input[i]);
\par \hich\af0\dbch\af31505\loch\f0             i++;
\par \hich\af0\dbch\af31505\loch\f0         \}
\par \hich\af0\dbch\af31505\loch\f0         else \{
\par \hich\af0\dbch\af31505\loch\f0             printf("Unknown character: %c\\n", input[i]);
\par \hich\af0\dbch\af31505\loch\f0             i++;
\par \hich\af0\dbch\af31505\loch\f0         \}
\par \hich\af0\dbch\af31505\loch\f0     \}
\par \}
\par \hich\af0\dbch\af31505\loch\f0 int main() \{
\par \hich\af0\dbch\af31505\loch\f0     char input[MAX_LEN];
\par \hich\af0\dbch\af31505\loch\f0     printf("Enter a string: ");
\par \hich\af0\dbch\af31505\loch\f0     fgets(input, MAX_LEN, stdin);
\par \hich\af0\dbch\af31505\loch\f0     input[strcspn(input, "\\n")] = '\\0';
\par \hich\af0\dbch\af31505\loch\f0 analyze(input);
\par \hich\af0\dbch\af31505\loch\f0 return 0;
\par \}
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid10617486\charrsid3873325 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\lang9\langfe16393\kerning0\langnp9\insrsid3873325 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\lang9\langfe16393\kerning0\langnp9\insrsid354400\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 OUTPUT:
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid354400\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Enter a string:}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid11276533\charrsid3873325 
\hich\af0\dbch\af31505\loch\f0  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid11276533\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 x+7=9}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\f0\lang9\langfe16393\kerning0\langnp9\insrsid354400\charrsid3873325 
\par \hich\af0\dbch\af31505\loch\f0  Identifier: x
\par \hich\af0\dbch\af31505\loch\f0 Operator: +
\par \hich\af0\dbch\af31505\loch\f0 Constant: 7
\par \hich\af0\dbch\af31505\loch\f0 Operator: =}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid11276533\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid354400\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Constant: 9
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid16196572\charrsid3873325 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid16196572\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Exp. No. 2 \hich\af0\dbch\af31505\loch\f0 Develop a lexical Analyzer to identify whether a given line is a comment or not using C}{
\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid16196572 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h>  
\par \hich\af0\dbch\af31505\loch\f0 #include<conio.h>  
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  char com[30];  
\par \hich\af0\dbch\af31505\loch\f0  int i=2,a=0;  
\par \hich\af0\dbch\af31505\loch\f0  printf("\\n Enter comment:"); 
\par \hich\af0\dbch\af31505\loch\f0  gets(com);  
\par \hich\af0\dbch\af31505\loch\f0  if(com[0]=='/')  
\par \hich\af0\dbch\af31505\loch\f0  \{ 
\par \hich\af0\dbch\af31505\loch\f0   if(com[1]=='/') 
\par \hich\af0\dbch\af31505\loch\f0    printf("\\n It is a comment");  
\par \hich\af0\dbch\af31505\loch\f0   else if(com[1]=='*')  
\par \hich\af0\dbch\af31505\loch\f0   \{   
\par \hich\af0\dbch\af31505\loch\f0    for(i=2;i<=30;i++) 
\par \hich\af0\dbch\af31505\loch\f0    \{ 
\par \hich\af0\dbch\af31505\loch\f0     if(com[i]=='*'&&com[i+1]=='/') 
\par \hich\af0\dbch\af31505\loch\f0     \{ 
\par \hich\af0\dbch\af31505\loch\f0      printf("\\n It is a comment");  
\par \hich\af0\dbch\af31505\loch\f0      a=1;  
\par \hich\af0\dbch\af31505\loch\f0      break;  
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     else  
\par \hich\af0\dbch\af31505\loch\f0      continue;  
\par \hich\af0\dbch\af31505\loch\f0    \}  
\par \hich\af0\dbch\af31505\loch\f0    if(a==0) 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n It is not a comment"); 
\par \hich\af0\dbch\af31505\loch\f0   \} 
\par \hich\af0\dbch\af31505\loch\f0   else 
\par \hich\af0\dbch\af31505\loch\f0    printf("\\n It is not a comment"); 
\par \hich\af0\dbch\af31505\loch\f0  \} 
\par \hich\af0\dbch\af31505\loch\f0  else  
\par \hich\af0\dbch\af31505\loch\f0   printf("\\n It is not a comment"); 
\par \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\lang9\langfe16393\kerning0\langnp9\insrsid16196572\charrsid3873325 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Input: }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid4596008\charrsid3873325 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Enter comment: }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 //hello }{
\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid4596008\charrsid3873325 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Output:}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  It is}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \f0\kerning0\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  a\hich\af0\dbch\af31505\loch\f0  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 comme}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \f0\kerning0\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 nt
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid354400\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid4596008\charrsid3873325 
\par 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid4596008\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 
Exp. No. 3 Design a lexical Analyzer for given language should ignore the redundant spaces, tabs and new lines and ignore comments using C}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid4596008 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<stdlib.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<ctype.h> 
\par \hich\af0\dbch\af31505\loch\f0 int isKeyword(char buffer[])\{ 
\par \hich\af0\dbch\af31505\loch\f0 char keywords[32][10] = 
\par \{\hich\af0\dbch\af31505\loch\f0 "main","auto","break","case","char","const","continue","default", 
\par \hich\af0\dbch\af31505\loch\f0 "do","double","else","enum","extern","float","for","goto", 
\par \hich\af0\dbch\af31505\loch\f0 "if","int","long","register","return","short","signed", 
\par \hich\af0\dbch\af31505\loch\f0 "sizeof","static","struct","switch","typedef", 
\par \hich\af0\dbch\af31505\loch\f0 "unsigned","void","printf","while"\}; 
\par \hich\af0\dbch\af31505\loch\f0 int i, flag = 0; 
\par \hich\af0\dbch\af31505\loch\f0 for(i = 0; i < 32; ++i) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(strcmp(keywords[i], buffer) == 0) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 flag = 1; 
\par \hich\af0\dbch\af31505\loch\f0 break; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 return flag; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 char ch, buffer[15], operators[] = "+-*/%="; 
\par \hich\af0\dbch\af31505\loch\f0 FILE *fp; 
\par \hich\af0\dbch\af31505\loch\f0 int i,j=0; 
\par \hich\af0\dbch\af31505\loch\f0 fp = fopen("flex_input.txt","r"); 
\par \hich\af0\dbch\af31505\loch\f0 if(fp == NULL)\{ 
\par \hich\af0\dbch\af31505\loch\f0 printf("error while opening the file\\n"); 
\par \hich\af0\dbch\af31505\loch\f0 e\hich\af0\dbch\af31505\loch\f0 xit(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 while((ch = fgetc(fp)) != EOF)\{ 
\par \hich\af0\dbch\af31505\loch\f0 for(i = 0; i < 6; ++i)\{ 
\par \hich\af0\dbch\af31505\loch\f0 if(ch == operators[i]) 
\par \hich\af0\dbch\af31505\loch\f0 printf("%c is operator\\n", ch); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(isalnum(ch))\{ 
\par \hich\af0\dbch\af31505\loch\f0 buffer[j++] = ch; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else if((ch == ' ' || ch == '\\n') && (j != 0))\{ 
\par \hich\af0\dbch\af31505\loch\f0 buffer[j] = '\\0'; 
\par \hich\af0\dbch\af31505\loch\f0 j = 0; 
\par \hich\af0\dbch\af31505\loch\f0 if(isKeyword(buffer) == 1) 
\par \hich\af0\dbch\af31505\loch\f0 printf("%s is keyword\\n", buffer); 
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 printf("%s is identifier\\n", buffer); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 fclose(fp); 
\par \hich\af0\dbch\af31505\loch\f0 return 0; 
\par \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Input:}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  flex_input.txt 
\par \hich\af0\dbch\af31505\loch\f0 main ( ) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int a, b, c ; 
\par \hich\af0\dbch\af31505\loch\f0 c = b + c; 
\par \hich\af0\dbch\af31505\loch\f0 printf ( "%d" ,c ) ; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 main is keyword 
\par \hich\af0\dbch\af31505\loch\f0 int is keyword 
\par \hich\af0\dbch\af31505\loch\f0 a is indentifier 
\par \hich\af0\dbch\af31505\loch\f0 b is indentifier 
\par \hich\af0\dbch\af31505\loch\f0 c is indentifier 
\par \hich\af0\dbch\af31505\loch\f0 c is indentifier 
\par \hich\af0\dbch\af31505\loch\f0 = is operator 
\par \hich\af0\dbch\af31505\loch\f0 b is indentifier 
\par \hich\af0\dbch\af31505\loch\f0 + is operator 
\par \hich\af0\dbch\af31505\loch\f0 c is indentifier 
\par \hich\af0\dbch\af31505\loch\f0 printf is keyword 
\par \hich\af0\dbch\af31505\loch\f0 % is operator 
\par \hich\af0\dbch\af31505\loch\f0 d is indentifier 
\par \hich\af0\dbch\af31505\loch\f0 c is indentifier}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 
Exp. No. 4 Design a lexical Analyzer to validate operators to recognize the operators +,-,*,/ using regular arithmetic operators using C}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h>  
\par \hich\af0\dbch\af31505\loch\f0 #include<conio.h>  
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  char s[5]; 
\par \hich\af0\dbch\af31505\loch\f0  printf("\\n Enter any operator:");  
\par \hich\af0\dbch\af31505\loch\f0  gets(s); 
\par \hich\af0\dbch\af31505\loch\f0  switch(s[0]) 
\par \hich\af0\dbch\af31505\loch\f0  \{ 
\par \hich\af0\dbch\af31505\loch\f0   case'>':  
\par \hich\af0\dbch\af31505\loch\f0    if(s[1]=='=') 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n Greater than or equal");  
\par \hich\af0\dbch\af31505\loch\f0    else 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n Greater than");  
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   case'<':  
\par \hich\af0\dbch\af31505\loch\f0    if(s[1]=='=') 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n Less than or equal");  
\par \hich\af0\dbch\af31505\loch\f0    else 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nLess than");  
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   case'=':  
\par \hich\af0\dbch\af31505\loch\f0    if(s[1]=='=')  
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nEqual to"); 
\par \hich\af0\dbch\af31505\loch\f0    else  
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nAssignment");  
\par \hich\af0\dbch\af31505\loch\f0    break;  
\par \hich\af0\dbch\af31505\loch\f0   case'!':  
\par \hich\af0\dbch\af31505\loch\f0    if(s[1]=='=') 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nNot Equal");  
\par \hich\af0\dbch\af31505\loch\f0    else 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n Bit Not");  
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   case'&':  
\par \hich\af0\dbch\af31505\loch\f0    if(s[1]=='&') 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nLogical AND");  
\par \hich\af0\dbch\af31505\loch\f0    else 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n Bitwise AND");  
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   case'|':  
\par \hich\af0\dbch\af31505\loch\f0    if(s[1]=='|')  
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nLogical OR");  
\par \hich\af0\dbch\af31505\loch\f0    else 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nBitwise OR");  
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   case'+':  
\par \hich\af0\dbch\af31505\loch\f0    printf("\\n Addition");  
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   case'-':  
\par \hich\af0\dbch\af31505\loch\f0    printf("\\nSubstraction");  
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   case'*':  
\par \hich\af0\dbch\af31505\loch\f0    printf("\\nMultiplication");  
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   case'/':  
\par \hich\af0\dbch\af31505\loch\f0    printf("\\nDivision"); 
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   case'%':  
\par \hich\af0\dbch\af31505\loch\f0    printf("Modulus");  
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   default:  
\par \hich\af0\dbch\af31505\loch\f0    printf("\\n Not a operator"); 
\par \hich\af0\dbch\af31505\loch\f0  \} 
\par \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Output: }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Enter any operator:<= }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Less than or equal}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Exp. No. 5 Design a lexical Analyzer to find the number of whitespaces and newline characters using C.}{\rtlch\fcs1 \ab\af0\afs28 
\ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include <stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0  int main() \{ 
\par \hich\af0\dbch\af31505\loch\f0     char str[100]; 
\par \hich\af0\dbch\af31505\loch\f0     int words = 0, lines = 0, characters = 0; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     printf("Enter text (up to 100 characters, use ~ to end):\\n"); 
\par \hich\af0\dbch\af31505\loch\f0     scanf("%[^~]", str); 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     for (int i = 0; str[i] != '\\0'; i++) \{ 
\par \hich\af0\dbch\af31505\loch\f0         if (str[i] == ' ' || str[i] == '\\t') \{ 
\par \hich\af0\dbch\af31505\loch\f0             words++; 
\par \hich\af0\dbch\af31505\loch\f0         \} else if (str[i] == '\\n') \{ 
\par \hich\af0\dbch\af31505\loch\f0             lines++; 
\par \hich\af0\dbch\af31505\loch\f0         \} else \{ 
\par \hich\af0\dbch\af31505\loch\f0             characters++; 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     if (characters > 0) \{ 
\par \hich\af0\dbch\af31505\loch\f0         words++; 
\par \hich\af0\dbch\af31505\loch\f0         lines++; 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     printf("Total number of words: %d\\n", words); 
\par \hich\af0\dbch\af31505\loch\f0     printf("Total number of lines: %d\\n", lines); 
\par \hich\af0\dbch\af31505\loch\f0     printf("Total number of characters: %d\\n", characters); 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     return 0; 
\par \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 void main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int a; 
\par \hich\af0\dbch\af31505\loch\f0 int b; 
\par \hich\af0\dbch\af31505\loch\f0 a = b + c; 
\par \hich\af0\dbch\af31505\loch\f0 c = d * e; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 Total number of words : 12 
\par \hich\af0\dbch\af31505\loch\f0 Total number of lines : 7 
\par \hich\af0\dbch\af31505\loch\f0 Total number of Character: 34}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 6 Develop a lexical Analyzer to test whether a given identifier is valid or not using C.}{\rtlch\fcs1 \ab\af0\afs28 
\ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include <stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include <ctype.h> 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int main() \{ 
\par \hich\af0\dbch\af31505\loch\f0     char a[10]; 
\par \hich\af0\dbch\af31505\loch\f0     int flag = 1, i = 1; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nEnter an identifier: "); 
\par \hich\af0\dbch\af31505\loch\f0     fgets(a, sizeof(a), stdin); 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     if (isalpha(a[0])) \{ 
\par \hich\af0\dbch\af31505\loch\f0         while (a[i] != '\\0') \{ 
\par \hich\af0\dbch\af31505\loch\f0             if (!isdigit(a[i]) && !isalpha(a[i])) \{ 
\par \hich\af0\dbch\af31505\loch\f0                 flag = 0; 
\par \hich\af0\dbch\af31505\loch\f0                 break; 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0             i++; 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0     \} else \{ 
\par \hich\af0\dbch\af31505\loch\f0         flag = 0; 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     if (flag == 1) \{ 
\par \hich\af0\dbch\af31505\loch\f0         printf("\\nValid identifier\\n"); 
\par \hich\af0\dbch\af31505\loch\f0     \} else \{ 
\par \hich\af0\dbch\af31505\loch\f0         printf("\\nNot a valid identifier\\n"); 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     return 0; 
\par \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Enter an identifier:abc123 }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Valid identifier}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 7 Write a C program to find FIRST( ) - predictive parser for the given grammar}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 
\b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 \hich\f0 S \u8594\'3f\loch\f0  AaAb / BbBa }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 
\b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 \hich\f0 A \u8594\'3f\loch\f0  }{\rtlch\fcs1 \ab\af34\afs28 \ltrch\fcs0 \b\f34\fs28\kerning0\insrsid12075212\charrsid5786600 
\loch\af34\dbch\af31505\hich\f34 \u8712\'3f}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 \hich\f0 B \u8594\'3f\loch\f0  }{\rtlch\fcs1 \ab\af34\afs28 \ltrch\fcs0 \b\f34\fs28\kerning0\insrsid12075212\charrsid5786600 
\loch\af34\dbch\af31505\hich\f34 \u8712\'3f}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<ctype.h> 
\par \hich\af0\dbch\af31505\loch\f0 void FIRST(char[],char ); 
\par \hich\af0\dbch\af31505\loch\f0 void addToResultSet(char[],char); 
\par \hich\af0\dbch\af31505\loch\f0 int numOfProductions; 
\par \hich\af0\dbch\af31505\loch\f0 char productionSet[10][10]; 
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     int i; 
\par \hich\af0\dbch\af31505\loch\f0     char choice; 
\par \hich\af0\dbch\af31505\loch\f0     char c; 
\par \hich\af0\dbch\af31505\loch\f0     char result[20]; 
\par \hich\af0\dbch\af31505\loch\f0     printf("How many number of productions ? :"); 
\par \hich\af0\dbch\af31505\loch\f0     scanf(" %d",&numOfProductions); 
\par \hich\af0\dbch\af31505\loch\f0     for(i=0;i<numOfProductions;i++)//read production string eg: E=E+T 
\par \hich\af0\dbch\af31505\loch\f0     \{ 
\par \hich\af0\dbch\af31505\loch\f0         printf("Enter productions Number %d : ",i+1); 
\par \hich\af0\dbch\af31505\loch\f0         scanf(" %s",productionSet[i]); 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     do 
\par \hich\af0\dbch\af31505\loch\f0     \{ 
\par \hich\af0\dbch\af31505\loch\f0         printf("\\n Find the FIRST of  :"); 
\par \hich\af0\dbch\af31505\loch\f0         scanf(" %c",&c); 
\par \hich\af0\dbch\af31505\loch\f0         FIRST(result,c); //Compute FIRST; Get Answer in 'result' array 
\par \hich\af0\dbch\af31505\loch\f0         printf("\\n FIRST(%c)= \{ ",c); 
\par \hich\af0\dbch\af31505\loch\f0         for(i=0;result[i]!='\\0';i++) 
\par \hich\af0\dbch\af31505\loch\f0         printf(" %c ",result[i]);       //Display result 
\par \hich\af0\dbch\af31505\loch\f0         printf("\}\\n"); 
\par \hich\af0\dbch\af31505\loch\f0          printf("press 'y' to continue : "); 
\par \hich\af0\dbch\af31505\loch\f0         scanf(" %c",&choice); 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     while(choice=='y'||choice =='Y'); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 /* 
\par \hich\af0\dbch\af31505\loch\f0  *Function FIRST: 
\par \hich\af0\dbch\af31505\loch\f0  *Compute the elements in FIRST(c) and write them 
\par \hich\af0\dbch\af31505\loch\f0  *in Result\hich\af0\dbch\af31505\loch\f0  Array. 
\par \hich\af0\dbch\af31505\loch\f0  */ 
\par \hich\af0\dbch\af31505\loch\f0 void FIRST(char* Result,char c) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     int i,j,k; 
\par \hich\af0\dbch\af31505\loch\f0     char subResult[20]; 
\par \hich\af0\dbch\af31505\loch\f0     int foundEpsilon; 
\par \hich\af0\dbch\af31505\loch\f0     subResult[0]='\\0'; 
\par \hich\af0\dbch\af31505\loch\f0     Result[0]='\\0'; 
\par \hich\af0\dbch\af31505\loch\f0     //If X is terminal, FIRST(X) = \{X\}. 
\par \hich\af0\dbch\af31505\loch\f0     if(!(isupper(c))) 
\par \hich\af0\dbch\af31505\loch\f0     \{ 
\par \hich\af0\dbch\af31505\loch\f0         addToResultSet(Result,c); 
\par \hich\af0\dbch\af31505\loch\f0                return ; 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     //If X is non terminal 
\par \hich\af0\dbch\af31505\loch\f0     //Read each production 
\par \hich\af0\dbch\af31505\loch\f0     for(i=0;i<numOfProductions;i++) 
\par \hich\af0\dbch\af31505\loch\f0     \{ 
\par \hich\af0\dbch\af31505\loch\f0 //Find production with X as LHS 
\par \hich\af0\dbch\af31505\loch\f0         if(productionSet[i][0]==c) 
\par \hich\af0\dbch\af31505\loch\f0         \{ 
\par }{\rtlch\fcs1 \af1283 \ltrch\fcs0 \f1283\kerning0\insrsid12075212\charrsid3873325 \hich\af1283\dbch\af31505\loch\f1283 \hich\f1283 //If X \u8594\'3e\loch\f1283 \hich\f1283  \'e5\loch\f1283 \hich\f1283  is a production, then add \'e5\loch\f1283 
 to FIRST(X). 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  if(productionSet[i][2]=='$') addToResultSet(Result,'$'); 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0             //If X is a non-terminal, and X \u8594\'3f\loch\f0 \hich\f0  Y1 Y2 \'85\loch\f0  Yk 
\par \hich\af0\dbch\af31505\loch\f0             //is a production, then add a to FIRST(X) 
\par \hich\af0\dbch\af31505\loch\f0             //if for some i, a is in FIR\hich\af0\dbch\af31505\loch\f0 ST(Yi), 
\par }{\rtlch\fcs1 \af1283 \ltrch\fcs0 \f1283\kerning0\insrsid12075212\charrsid3873325 \hich\af1283\dbch\af31505\loch\f1283 \hich\f1283             //and \'e5\loch\f1283 \hich\f1283  is in all of FIRST(Y1), \'85\loch\f1283 , FIRST(Yi-1). 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0       else 
\par \hich\af0\dbch\af31505\loch\f0             \{ 
\par \hich\af0\dbch\af31505\loch\f0                 j=2; 
\par \hich\af0\dbch\af31505\loch\f0                 while(productionSet[i][j]!='\\0') 
\par \hich\af0\dbch\af31505\loch\f0                 \{ 
\par \hich\af0\dbch\af31505\loch\f0                 foundEpsilon=0; 
\par \hich\af0\dbch\af31505\loch\f0                 FIRST(subResult,productionSet[i][j]); 
\par \hich\af0\dbch\af31505\loch\f0                 for(k=0;subResult[k]!='\\0';k++) 
\par \hich\af0\dbch\af31505\loch\f0                     addToResultSet(Result,subResult[k]); 
\par \hich\af0\dbch\af31505\loch\f0                  for(k=0;subResult[k]!='\\0';k++) 
\par \hich\af0\dbch\af31505\loch\f0                      if(subResult[k]=='$') 
\par \hich\af0\dbch\af31505\loch\f0                      \{ 
\par \hich\af0\dbch\af31505\loch\f0            \hich\af0\dbch\af31505\loch\f0               foundEpsilon=1; 
\par \hich\af0\dbch\af31505\loch\f0                          break; 
\par \hich\af0\dbch\af31505\loch\f0                      \} 
\par }{\rtlch\fcs1 \af1283 \ltrch\fcs0 \f1283\kerning0\insrsid12075212\charrsid3873325 \hich\af1283\dbch\af31505\loch\f1283 \hich\f1283                  //No \'e5\loch\f1283  found, no need to check next element 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0                  if(!foundEpsilon) 
\par \hich\af0\dbch\af31505\loch\f0                      break; 
\par \hich\af0\dbch\af31505\loch\f0                  j++; 
\par \hich\af0\dbch\af31505\loch\f0                 \} 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     return ; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 /* addToResultSet adds the computed 
\par \hich\af0\dbch\af31505\loch\f0  *element to result set. 
\par \hich\af0\dbch\af31505\loch\f0  *This code avoids multiple inclusion of elements 
\par \hich\af0\dbch\af31505\loch\f0   */ 
\par \hich\af0\dbch\af31505\loch\f0 void addToResultSet(char Result[],char val) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     int k; 
\par \hich\af0\dbch\af31505\loch\f0     for(k=0 ;Result[k]!='\\0';k++) 
\par \hich\af0\dbch\af31505\loch\f0         if(Result[k]==val) 
\par \hich\af0\dbch\af31505\loch\f0             return; 
\par \hich\af0\dbch\af31505\loch\f0     Result[k]=val; 
\par \hich\af0\dbch\af31505\loch\f0     Result[k+1]='\\0'; 
\par \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 How many number of productions ? :4 
\par \hich\af0\dbch\af31505\loch\f0 Enter productions Number 1 : S=AaAb 
\par \hich\af0\dbch\af31505\loch\f0 Enter productions Number 2 : S=BbBa 
\par \hich\af0\dbch\af31505\loch\f0 Enter productions Number 3 : A=$ 
\par \hich\af0\dbch\af31505\loch\f0 Enter productions Number 4 : B=$ 
\par \hich\af0\dbch\af31505\loch\f0 Find the FIRST of  :S 
\par \hich\af0\dbch\af31505\loch\f0 FIRST(S)= \{  $  a  b \} 
\par \hich\af0\dbch\af31505\loch\f0 press 'y' to continue : y 
\par \hich\af0\dbch\af31505\loch\f0 Find the FIRST of  :A 
\par \hich\af0\dbch\af31505\loch\f0 FIRST(A)= \{  $ \} 
\par \hich\af0\dbch\af31505\loch\f0 press 'y' to continue : y 
\par \hich\af0\dbch\af31505\loch\f0 Find the FIRST of  :B 
\par \hich\af0\dbch\af31505\loch\f0 FIRST(B)= \{  $ \} 
\par \hich\af0\dbch\af31505\loch\f0 press 'y' to continue : n}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 8                             
\par \hich\af0\dbch\af31505\loch\f0 Write a C program to find FOLLOW( ) - predictive parser for the given grammar 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 S \u8594\'3f\loch\f0  AaAb / BbBa 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 A \u8594\'3f\loch\f0  }{\rtlch\fcs1 \ab\af34\afs28 \ltrch\fcs0 \b\f34\fs28\kerning0\insrsid12075212\charrsid5786600 \loch\af34\dbch\af31505\hich\f34 \u8712\'3f}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 
\b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 B \u8594\'3f\loch\f0  }{\rtlch\fcs1 \ab\af34\afs28 \ltrch\fcs0 \b\f34\fs28\kerning0\insrsid12075212\charrsid5786600 \loch\af34\dbch\af31505\hich\f34 \u8712\'3f}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 
\b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h>  
\par \hich\af0\dbch\af31505\loch\f0 #include<ctype.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0 int limit, x = 0; 
\par \hich\af0\dbch\af31505\loch\f0 char production[10][10], array[10]; 
\par \hich\af0\dbch\af31505\loch\f0   
\par \hich\af0\dbch\af31505\loch\f0 void find_first(char ch); 
\par \hich\af0\dbch\af31505\loch\f0 void find_follow(char ch); 
\par \hich\af0\dbch\af31505\loch\f0 void Array_Manipulation(char ch); 
\par \hich\af0\dbch\af31505\loch\f0   
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0       int count; 
\par \hich\af0\dbch\af31505\loch\f0       char option, ch; 
\par \hich\af0\dbch\af31505\loch\f0       printf("\\nEnter Total Number of Productions:\\t"); 
\par \hich\af0\dbch\af31505\loch\f0       scanf("%d", &limit); 
\par \hich\af0\dbch\af31505\loch\f0       for(count = 0; count < limit; count++) 
\par \hich\af0\dbch\af31505\loch\f0       \{ 
\par \hich\af0\dbch\af31505\loch\f0             printf("\\nValue of Production Number [%d]:\\t", count + 1); 
\par \hich\af0\dbch\af31505\loch\f0             scanf("%s", production[count]); 
\par \hich\af0\dbch\af31505\loch\f0       \} 
\par \hich\af0\dbch\af31505\loch\f0       do 
\par \hich\af0\dbch\af31505\loch\f0       \{ 
\par \hich\af0\dbch\af31505\loch\f0             x = 0; 
\par \hich\af0\dbch\af31505\loch\f0             printf("\\nEnter production Value to Find Follow:\\t"); 
\par \hich\af0\dbch\af31505\loch\f0             scanf(" %c", &ch); 
\par \hich\af0\dbch\af31505\loch\f0             find_follow(ch); 
\par \hich\af0\dbch\af31505\loch\f0             printf("\\nFollow Value of %c:\\t\{ ", ch); 
\par \hich\af0\dbch\af31505\loch\f0             for(count = \hich\af0\dbch\af31505\loch\f0 0; count < x; count++) 
\par \hich\af0\dbch\af31505\loch\f0             \{ 
\par \hich\af0\dbch\af31505\loch\f0                   printf("%c ", array[count]); 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0             printf("\}\\n"); 
\par \hich\af0\dbch\af31505\loch\f0             printf("To Continue, Press Y:\\t"); 
\par \hich\af0\dbch\af31505\loch\f0             scanf(" %c", &option); 
\par \hich\af0\dbch\af31505\loch\f0       \}while(option == 'y' || option == 'Y'); 
\par \hich\af0\dbch\af31505\loch\f0       return 0; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0   
\par \hich\af0\dbch\af31505\loch\f0 void find_follow(char ch) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0       int i, j; 
\par \hich\af0\dbch\af31505\loch\f0       int length = strlen(production[i]); 
\par \hich\af0\dbch\af31505\loch\f0       if(production[0][0] == ch) 
\par \hich\af0\dbch\af31505\loch\f0       \{ 
\par \hich\af0\dbch\af31505\loch\f0             Array_Manipulation('$'); 
\par \hich\af0\dbch\af31505\loch\f0       \} 
\par \hich\af0\dbch\af31505\loch\f0       for(i = 0; i < limit; i++) 
\par \hich\af0\dbch\af31505\loch\f0       \{ 
\par \hich\af0\dbch\af31505\loch\f0             for(j = 2; j < length; j++) 
\par \hich\af0\dbch\af31505\loch\f0             \{ 
\par \hich\af0\dbch\af31505\loch\f0                   if(production[i][j] == ch) 
\par \hich\af0\dbch\af31505\loch\f0                   \{ 
\par \hich\af0\dbch\af31505\loch\f0                         if(production[i][j + 1] != '\\0') 
\par \hich\af0\dbch\af31505\loch\f0                         \{ 
\par \hich\af0\dbch\af31505\loch\f0                               find_first(production[i][j + 1]); 
\par \hich\af0\dbch\af31505\loch\f0                         \} 
\par \hich\af0\dbch\af31505\loch\f0                         if(production[i][j + 1] == '\\0' && ch != production[i][0]) 
\par \hich\af0\dbch\af31505\loch\f0                         \{      
\par \hich\af0\dbch\af31505\loch\f0                               find_follow(production[\hich\af0\dbch\af31505\loch\f0 i][0]); 
\par \hich\af0\dbch\af31505\loch\f0                         \} 
\par \hich\af0\dbch\af31505\loch\f0                   \} 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0       \} 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0   
\par \hich\af0\dbch\af31505\loch\f0 void find_first(char ch) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0       int i, k; 
\par \hich\af0\dbch\af31505\loch\f0       if(!(isupper(ch))) 
\par \hich\af0\dbch\af31505\loch\f0       \{ 
\par \hich\af0\dbch\af31505\loch\f0             Array_Manipulation(ch); 
\par \hich\af0\dbch\af31505\loch\f0       \} 
\par \hich\af0\dbch\af31505\loch\f0       for(k = 0; k < limit; k++) 
\par \hich\af0\dbch\af31505\loch\f0       \{ 
\par \hich\af0\dbch\af31505\loch\f0             if(production[k][0] == ch) 
\par \hich\af0\dbch\af31505\loch\f0             \{ 
\par \hich\af0\dbch\af31505\loch\f0                   if(production[k][2] == '$')  
\par \hich\af0\dbch\af31505\loch\f0                   \{ 
\par \hich\af0\dbch\af31505\loch\f0                         find_follow(production[i][0]); 
\par \hich\af0\dbch\af31505\loch\f0                   \} 
\par \hich\af0\dbch\af31505\loch\f0                   else if(islower(production[k][2])) 
\par \hich\af0\dbch\af31505\loch\f0                   \{ 
\par \hich\af0\dbch\af31505\loch\f0                         Array_Manipulation(production[k][2]); 
\par \hich\af0\dbch\af31505\loch\f0                   \} 
\par \hich\af0\dbch\af31505\loch\f0                   else  
\par \hich\af0\dbch\af31505\loch\f0                   \{ 
\par \hich\af0\dbch\af31505\loch\f0                         find_first(production[k][2]); 
\par \hich\af0\dbch\af31505\loch\f0         \hich\af0\dbch\af31505\loch\f0           \} 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0       \} 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0   
\par \hich\af0\dbch\af31505\loch\f0 void Array_Manipulation(char ch) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0       int count; 
\par \hich\af0\dbch\af31505\loch\f0       for(count = 0; count <= x; count++) 
\par \hich\af0\dbch\af31505\loch\f0       \{ 
\par \hich\af0\dbch\af31505\loch\f0             if(array[count] == ch) 
\par \hich\af0\dbch\af31505\loch\f0             \{ 
\par \hich\af0\dbch\af31505\loch\f0                   return; 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0       \} 
\par \hich\af0\dbch\af31505\loch\f0       array[x++] = ch; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid12075212\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Enter Total Number of Productions: \hich\af0\dbch\af31505\loch\f0 4 
\par \hich\af0\dbch\af31505\loch\f0 Value of Production Number [1]: S=AaAb 
\par \hich\af0\dbch\af31505\loch\f0 Value of Production Number [2]: S=BbBa 
\par \hich\af0\dbch\af31505\loch\f0 Value of Production Number [3]: A=$ 
\par \hich\af0\dbch\af31505\loch\f0 Value of Production Number [4]: B=$ 
\par \hich\af0\dbch\af31505\loch\f0 Enter production Value to Find Follow:  S 
\par \hich\af0\dbch\af31505\loch\f0 Follow Value of S:      \{ $ \} 
\par \hich\af0\dbch\af31505\loch\f0 To Continue, Press Y:   y 
\par \hich\af0\dbch\af31505\loch\f0 Enter production Value to Find Follow:  A 
\par \hich\af0\dbch\af31505\loch\f0 Follow Value of A:      \{ a b \} 
\par \hich\af0\dbch\af31505\loch\f0 To Continue, Press Y:   y 
\par \hich\af0\dbch\af31505\loch\f0 Enter production Value to Find Follow:  B 
\par \hich\af0\dbch\af31505\loch\f0 Follow Value of B:      \{ b a \} 
\par \hich\af0\dbch\af31505\loch\f0 To Continue, Press Y:   n}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 9                             
\par \hich\af0\dbch\af31505\loch\f0 Implement a C program to eliminate left recursion from a given CFG. 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 S \u8594\'3f\loch\f0  (L) / a 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 L \u8594\'3f\loch\f0  L , S / S 
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h>   
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h>   
\par \hich\af0\dbch\af31505\loch\f0 #define SIZE 10   
\par \hich\af0\dbch\af31505\loch\f0   int main () \{   
\par \hich\af0\dbch\af31505\loch\f0        char non_terminal;   
\par \hich\af0\dbch\af31505\loch\f0        char beta,alpha;   
\par \hich\af0\dbch\af31505\loch\f0        int num;   
\par \hich\af0\dbch\af31505\loch\f0        char production[10][SIZE];   
\par \hich\af0\dbch\af31505\loch\f0        int index=3; /* starting of the string following "->" */   
\par \hich\af0\dbch\af31505\loch\f0        printf("Enter Number of Production : ");   
\par \hich\af0\dbch\af31505\loch\f0        scanf("%d",&num);   
\par \hich\af0\dbch\af31505\loch\f0        printf("Enter the grammar as E->E-A :\\n");   
\par \hich\af0\dbch\af31505\loch\f0        for(int i=0;i<num;i++)\{   
\par \hich\af0\dbch\af31505\loch\f0             scanf("%s",production[i]);   
\par \hich\af0\dbch\af31505\loch\f0        \}   
\par \hich\af0\dbch\af31505\loch\f0        for(int i=0;i<num;i++)\{   
\par \hich\af0\dbch\af31505\loch\f0             printf(\hich\af0\dbch\af31505\loch\f0 "\\nGRAMMAR : : : %s",production[i]);   
\par \hich\af0\dbch\af31505\loch\f0             non_terminal=production[i][0];   
\par \hich\af0\dbch\af31505\loch\f0             if(non_terminal==production[i][index]) \{   
\par \hich\af0\dbch\af31505\loch\f0                  alpha=production[i][index+1];   
\par \hich\af0\dbch\af31505\loch\f0                  printf(" is left recursive.\\n");   
\par \hich\af0\dbch\af31505\loch\f0                  while(production[i][index]!=0 && production[i][index]!='|')   
\par \hich\af0\dbch\af31505\loch\f0                       index++;   
\par \hich\af0\dbch\af31505\loch\f0                  if(production[i][index]!=0) \{   
\par \hich\af0\dbch\af31505\loch\f0                       beta=production[i][index+1];   
\par \hich\af0\dbch\af31505\loch\f0                       printf("Grammar without lef\hich\af0\dbch\af31505\loch\f0 t recursion:\\n");   
\par \hich\af0\dbch\af31505\loch\f0                       printf("%c->%c%c\\'",non_terminal,beta,non_terminal);   
\par \hich\af0\dbch\af31505\loch\f0                       printf("\\n%c\\'->%c%c\\'|E\\n",non_terminal,alpha,non_terminal);   
\par \hich\af0\dbch\af31505\loch\f0                  \}   
\par \hich\af0\dbch\af31505\loch\f0                  else   
\par \hich\af0\dbch\af31505\loch\f0                       printf(" can't be reduced\\n");   
\par \hich\af0\dbch\af31505\loch\f0             \}   
\par \hich\af0\dbch\af31505\loch\f0             else   
\par \hich\af0\dbch\af31505\loch\f0                  printf(" is not left recursive.\\n");   
\par \hich\af0\dbch\af31505\loch\f0             index=3;   
\par \hich\af0\dbch\af31505\loch\f0        \}   
\par \hich\af0\dbch\af31505\loch\f0   \}    
\par \hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Enter Number of Production : 2 
\par \hich\af0\dbch\af31505\loch\f0 Enter the grammar as E->E-A : 
\par \hich\af0\dbch\af31505\loch\f0 S->(L)|a 
\par \hich\af0\dbch\af31505\loch\f0 L->L,S|S 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 GRAMMAR : : : S->(L)|a is not left recursive. 
\par \hich\af0\dbch\af31505\loch\f0 GRAMMAR : : : L->L,S|S is left recursive. 
\par \hich\af0\dbch\af31505\loch\f0 Grammar without left recursion: 
\par \hich\af0\dbch\af31505\loch\f0 L->SL' }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 L'->,L'|E}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid12075212\charrsid3873325 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 10                            
\par \hich\af0\dbch\af31505\loch\f0 Implement a C program to eliminate left factoring from a given CFG. 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 S \u8594\'3f\loch\f0  iEtS / iEtSeS / a 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 E \u8594\'3f\loch\f0  b 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     char gram[20], part1[20], part2[20], modifiedGram[20], newGram[20]; 
\par \hich\af0\dbch\af31505\loch\f0     int i, j = 0, k = 0, l = 0, pos; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     // Input production 
\par \hich\af0\dbch\af31505\loch\f0     printf("Enter Production: S->"); 
\par \hich\af0\dbch\af31505\loch\f0     gets(gram); 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     // Extract part1 and part2 
\par \hich\af0\dbch\af31505\loch\f0     for(i = 0; gram[i] != '|'; i++, j++) 
\par \hich\af0\dbch\af31505\loch\f0         part1[j] = gram[i]; 
\par \hich\af0\dbch\af31505\loch\f0     part1[j] = '\\0'; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     for(j = ++i, i = 0; gram[j] != '\\0'; j++, i++) 
\par \hich\af0\dbch\af31505\loch\f0         part2[i] = gram[j]; 
\par \hich\af0\dbch\af31505\loch\f0     part2[i] = '\\0'; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     // Find common prefix 
\par \hich\af0\dbch\af31505\loch\f0     for(i = 0; part1[\hich\af0\dbch\af31505\loch\f0 i] == part2[i]; i++) 
\par \hich\af0\dbch\af31505\loch\f0     \{ 
\par \hich\af0\dbch\af31505\loch\f0         modifiedGram[k] = part1[i]; 
\par \hich\af0\dbch\af31505\loch\f0         k++; 
\par \hich\af0\dbch\af31505\loch\f0         pos = i + 1; 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     // Create modified production 
\par \hich\af0\dbch\af31505\loch\f0     modifiedGram[k] = 'X'; 
\par \hich\af0\dbch\af31505\loch\f0     modifiedGram[++k] = '\\0'; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     // Create new production 
\par \hich\af0\dbch\af31505\loch\f0     for(i = pos, j = 0; part1[i] != '\\0'; i++, j++) 
\par \hich\af0\dbch\af31505\loch\f0         newGram[j] = part1[i]; 
\par \hich\af0\dbch\af31505\loch\f0     newGram[j++] = '|'; 
\par \hich\af0\dbch\af31505\loch\f0     for(i = pos; part2[i] != '\\0'; i++, j++) 
\par \hich\af0\dbch\af31505\loch\f0         newGram[j] = part2[i]; 
\par \hich\af0\dbch\af31505\loch\f0     newGram[j] = '\\0'; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     // Print the result 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n S->%s", modifiedGram); 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n X->%s\\n", newGram); 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     return 0; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Enter Production : S->iEtS|iEtSeS|a 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  S->iEtSX 
\par \hich\af0\dbch\af31505\loch\f0  X->|eS|a}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 11                            
\par \hich\af0\dbch\af31505\loch\f0 Implement a C program to perform symbol table operations. 
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<stdlib.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0 int cnt=0; 
\par \hich\af0\dbch\af31505\loch\f0 struct symtab 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 char label[20];  
\par \hich\af0\dbch\af31505\loch\f0 int addr; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 sy[50];  
\par \hich\af0\dbch\af31505\loch\f0 void insert(); 
\par \hich\af0\dbch\af31505\loch\f0 int search(char *);  
\par \hich\af0\dbch\af31505\loch\f0 void display();  
\par \hich\af0\dbch\af31505\loch\f0 void modify();  
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int ch,val;  
\par \hich\af0\dbch\af31505\loch\f0 char lab[10]; 
\par \hich\af0\dbch\af31505\loch\f0 do 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n1.insert\\n2.display\\n3.search\\n4.modify\\n5.exit\\n");  
\par \hich\af0\dbch\af31505\loch\f0 scanf("%d",&ch); 
\par \hich\af0\dbch\af31505\loch\f0 switch(ch) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 case 1: 
\par \hich\af0\dbch\af31505\loch\f0 insert(); 
\par \hich\af0\dbch\af31505\loch\f0 break; 
\par \hich\af0\dbch\af31505\loch\f0 case 2:  
\par \hich\af0\dbch\af31505\loch\f0 display();  
\par \hich\af0\dbch\af31505\loch\f0 break; 
\par \hich\af0\dbch\af31505\loch\f0 case 3: 
\par \hich\af0\dbch\af31505\loch\f0 printf("enter the label");  
\par \hich\af0\dbch\af31505\loch\f0 scanf("%s",lab); 
\par \hich\af0\dbch\af31505\loch\f0 val=search(lab); 
\par \hich\af0\dbch\af31505\loch\f0    if(val==1) 
\par \hich\af0\dbch\af31505\loch\f0    printf("label is found"); 
\par \hich\af0\dbch\af31505\loch\f0    else 
\par \hich\af0\dbch\af31505\loch\f0    printf("label is not found"); 
\par \hich\af0\dbch\af31505\loch\f0   break;  
\par \hich\af0\dbch\af31505\loch\f0  case 4: 
\par \hich\af0\dbch\af31505\loch\f0    modify(); 
\par \hich\af0\dbch\af31505\loch\f0   break;  
\par \hich\af0\dbch\af31505\loch\f0  case 5: 
\par \hich\af0\dbch\af31505\loch\f0    exit(0); 
\par \hich\af0\dbch\af31505\loch\f0    break; 
\par \hich\af0\dbch\af31505\loch\f0   \} 
\par \hich\af0\dbch\af31505\loch\f0  \}while(ch<5); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 void insert() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int val; 
\par \hich\af0\dbch\af31505\loch\f0  char lab[10]; 
\par \hich\af0\dbch\af31505\loch\f0  int symbol;  
\par \hich\af0\dbch\af31505\loch\f0  printf("enter the label");  
\par \hich\af0\dbch\af31505\loch\f0  scanf("%s",lab);  
\par \hich\af0\dbch\af31505\loch\f0  val=search(lab);  
\par \hich\af0\dbch\af31505\loch\f0  if(val==1) 
\par \hich\af0\dbch\af31505\loch\f0  printf("duplicate symbol"); 
\par \hich\af0\dbch\af31505\loch\f0  else 
\par \hich\af0\dbch\af31505\loch\f0  \{ 
\par \hich\af0\dbch\af31505\loch\f0   strcpy(sy[cnt].label,lab);  
\par \hich\af0\dbch\af31505\loch\f0   printf("enter the address");   
\par \hich\af0\dbch\af31505\loch\f0   scanf("%d",&sy[cnt].addr);  
\par \hich\af0\dbch\af31505\loch\f0   cnt++; 
\par \hich\af0\dbch\af31505\loch\f0  \} 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int search(char *s) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  int flag=0,i; for(i=0;i<cnt;i++) 
\par \hich\af0\dbch\af31505\loch\f0  \{ 
\par \hich\af0\dbch\af31505\loch\f0   if(strcmp(sy[i].label,s)==0) 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 flag=1; 
\par \hich\af0\dbch\af31505\loch\f0 return flag; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 void modify() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int val,ad,i;  
\par \hich\af0\dbch\af31505\loch\f0 char lab[10]; 
\par \hich\af0\dbch\af31505\loch\f0 printf("enter the labe:");  
\par \hich\af0\dbch\af31505\loch\f0 scanf("%s",lab);  
\par \hich\af0\dbch\af31505\loch\f0 val=search(lab);  
\par \hich\af0\dbch\af31505\loch\f0 if(val==0) 
\par \hich\af0\dbch\af31505\loch\f0 printf("no such symbol"); 
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 printf("label is found \\n");  
\par \hich\af0\dbch\af31505\loch\f0 printf("enter the address");  
\par \hich\af0\dbch\af31505\loch\f0 scanf("%d",&ad);  
\par \hich\af0\dbch\af31505\loch\f0 for(i=0;i<cnt;i++) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(strcmp(sy[i].label,lab)==0) 
\par \hich\af0\dbch\af31505\loch\f0 sy[i].addr=ad; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 void display() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int i;  
\par \hich\af0\dbch\af31505\loch\f0 for(i=0;i<cnt;i++) 
\par \hich\af0\dbch\af31505\loch\f0 printf("%s\\t%d\\n",sy[i].label,sy[i].addr); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 1.insert 
\par \hich\af0\dbch\af31505\loch\f0 2.display 
\par \hich\af0\dbch\af31505\loch\f0 3.search 
\par \hich\af0\dbch\af31505\loch\f0 4.modify 
\par \hich\af0\dbch\af31505\loch\f0 5.exit 
\par \hich\af0\dbch\af31505\loch\f0 1 
\par \hich\af0\dbch\af31505\loch\f0 enter the label a 
\par \hich\af0\dbch\af31505\loch\f0 enter the address 100 
\par \hich\af0\dbch\af31505\loch\f0 1.insert 
\par \hich\af0\dbch\af31505\loch\f0 2.display 
\par \hich\af0\dbch\af31505\loch\f0 3.search 
\par \hich\af0\dbch\af31505\loch\f0 4.modify 
\par \hich\af0\dbch\af31505\loch\f0 5.exit 
\par \hich\af0\dbch\af31505\loch\f0 2 
\par \hich\af0\dbch\af31505\loch\f0 a       
\par \hich\af0\dbch\af31505\loch\f0 100 
\par \hich\af0\dbch\af31505\loch\f0 1.insert 
\par \hich\af0\dbch\af31505\loch\f0 2.display 
\par \hich\af0\dbch\af31505\loch\f0 3.search 
\par \hich\af0\dbch\af31505\loch\f0 4.modify 
\par \hich\af0\dbch\af31505\loch\f0 5.exit 
\par \hich\af0\dbch\af31505\loch\f0 3 
\par \hich\af0\dbch\af31505\loch\f0 enter the label a 
\par \hich\af0\dbch\af31505\loch\f0 label is found 
\par \hich\af0\dbch\af31505\loch\f0 1.insert 
\par \hich\af0\dbch\af31505\loch\f0 2.display 
\par \hich\af0\dbch\af31505\loch\f0 3.search 
\par \hich\af0\dbch\af31505\loch\f0 4.modify 
\par \hich\af0\dbch\af31505\loch\f0 5.exit 
\par \hich\af0\dbch\af31505\loch\f0 4 
\par \hich\af0\dbch\af31505\loch\f0 enter the labe: a 
\par \hich\af0\dbch\af31505\loch\f0 label is found 
\par \hich\af0\dbch\af31505\loch\f0 enter the address 200 
\par \hich\af0\dbch\af31505\loch\f0 1.insert 
\par \hich\af0\dbch\af31505\loch\f0 2.display 
\par \hich\af0\dbch\af31505\loch\f0 3.search 
\par \hich\af0\dbch\af31505\loch\f0 4.modify 
\par \hich\af0\dbch\af31505\loch\f0 5.exit 
\par \hich\af0\dbch\af31505\loch\f0 2 
\par \hich\af0\dbch\af31505\loch\f0 a       
\par \hich\af0\dbch\af31505\loch\f0 200 
\par \hich\af0\dbch\af31505\loch\f0 1.insert 
\par \hich\af0\dbch\af31505\loch\f0 2.display 
\par \hich\af0\dbch\af31505\loch\f0 3.search 
\par \hich\af0\dbch\af31505\loch\f0 4.modify 
\par \hich\af0\dbch\af31505\loch\f0 5.exit 
\par \hich\af0\dbch\af31505\loch\f0 5}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 12                            
\par \hich\af0\dbch\af31505\loch\f0 Write a C program to construct recursive descent parsing for the given 
\par \hich\af0\dbch\af31505\loch\f0 grammar 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 E \u8594\'3f\loch\f0  TE\hich\f0 \rquote \loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 E\hich\f0 \rquote \loch\f0 \hich\f0  \u8594\'3f\loch\f0  +TE\hich\f0 \rquote \loch\f0  / }{\rtlch\fcs1 \ab\af34\afs28 \ltrch\fcs0 \b\f34\fs28\kerning0\insrsid3873325\charrsid5786600 \loch\af34\dbch\af31505\hich\f34 \u8712
\'3f}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 T \u8594\'3f\loch\f0  FT\hich\f0 \rquote \loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 T\hich\f0 \rquote \loch\f0 \hich\f0  \u8594\'3f\loch\f0  *FT\hich\f0 \rquote \loch\f0  / }{\rtlch\fcs1 \ab\af34\afs28 \ltrch\fcs0 \b\f34\fs28\kerning0\insrsid3873325\charrsid5786600 \loch\af34\dbch\af31505\hich\f34 \u8712
\'3f}{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0 F \u8594\'3f\loch\f0  ( E ) /  id 
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<conio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0 char input[100]; 
\par \hich\af0\dbch\af31505\loch\f0 int i,l; 
\par \hich\af0\dbch\af31505\loch\f0 void main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 //clrscr(); 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\nRecursive descent parsing for the following grammar\\n"); printf("\\nE
\par \hich\af0\dbch\af31505\loch\f0 >TE'\\nE'->+TE'/@\\nT->FT'\\nT'->*FT'/@\\nF->(E)/ID\\n"); printf("\\nEnter the 
\par \hich\af0\dbch\af31505\loch\f0 string to be checked:"); gets(input); 
\par \hich\af0\dbch\af31505\loch\f0 if(E()) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(input[i+1]=='\\0') 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\nString is accepted"); 
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\nString is not accepted"); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\nString not accepted"); 
\par \hich\af0\dbch\af31505\loch\f0 getch(); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 E() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(T()) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(EP()) 
\par \hich\af0\dbch\af31505\loch\f0 return(1); 
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 EP() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(input[i]=='+') 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 i++; 
\par \hich\af0\dbch\af31505\loch\f0 if(T()) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(EP()) 
\par \hich\af0\dbch\af31505\loch\f0 return(1); 
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(1); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 T() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(F()) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(TP()) 
\par \hich\af0\dbch\af31505\loch\f0 return(1); 
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 TP() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(input[i]=='*') 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 i++; 
\par \hich\af0\dbch\af31505\loch\f0 if(F()) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(TP()) 
\par \hich\af0\dbch\af31505\loch\f0 return(1); 
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(1); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 F() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(input[i]=='(') 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 i++; 
\par \hich\af0\dbch\af31505\loch\f0 if(E()) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(input[i]==')') 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 i++; 
\par \hich\af0\dbch\af31505\loch\f0 return(1); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else if(input[i]>='a'&&input[i]<='z'||input[i]>='A'&&input[i]<='Z') 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 i++; 
\par \hich\af0\dbch\af31505\loch\f0 return(1); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0 return(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Recursive descent parsing for the following grammar 
\par \hich\af0\dbch\af31505\loch\f0 E->TE' 
\par \hich\af0\dbch\af31505\loch\f0 E'->+TE'/@ 
\par \hich\af0\dbch\af31505\loch\f0 T->FT' 
\par \hich\af0\dbch\af31505\loch\f0 T'->*FT'/@ 
\par \hich\af0\dbch\af31505\loch\f0 F->(E)/ID 
\par \hich\af0\dbch\af31505\loch\f0 Enter the string to be checked: (a+b)*c 
\par \hich\af0\dbch\af31505\loch\f0 String is accepted 
\par \hich\af0\dbch\af31505\loch\f0 Enter the string to be checked: a/c+d 
\par \hich\af0\dbch\af31505\loch\f0 String is not accepted}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 13                            
\par \hich\af0\dbch\af31505\loch\f0 Write a C program to implement either Top Down parsing technique or 
\par \hich\af0\dbch\af31505\loch\f0 Bottom Up Parsing  technique to check whether the given input string  
\par \hich\af0\dbch\af31505\loch\f0 is satisfying the grammar or not. 
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h>  
\par \hich\af0\dbch\af31505\loch\f0 #include<conio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0 int main() \{ 
\par \hich\af0\dbch\af31505\loch\f0  char string[50]; 
\par \hich\af0\dbch\af31505\loch\f0  int flag,count=0; 
\par \hich\af0\dbch\af31505\loch\f0  printf("The grammar is: S->aS, S->Sb, S->ab\\n"); 
\par \hich\af0\dbch\af31505\loch\f0  printf("Enter the string to be checked:\\n"); 
\par \hich\af0\dbch\af31505\loch\f0  gets(string); 
\par \hich\af0\dbch\af31505\loch\f0  if(string[0]=='a') \{ 
\par \hich\af0\dbch\af31505\loch\f0   flag=0; 
\par \hich\af0\dbch\af31505\loch\f0   for (count=1;string[count-1]!='\\0';count++) \{ 
\par \hich\af0\dbch\af31505\loch\f0    if(string[count]=='b') \{ 
\par \hich\af0\dbch\af31505\loch\f0     flag=1; 
\par \hich\af0\dbch\af31505\loch\f0     continue; 
\par \hich\af0\dbch\af31505\loch\f0    \} else if((flag==1)&&(string[count]=='a')) \{ 
\par \hich\af0\dbch\af31505\loch\f0     printf("The string does not belong to the specified 
\par \hich\af0\dbch\af31505\loch\f0 grammar"); 
\par \hich\af0\dbch\af31505\loch\f0     break; 
\par \hich\af0\dbch\af31505\loch\f0    \} else if(string[count]=='a') 
\par \hich\af0\dbch\af31505\loch\f0    continue; else if((flag==1)&&(string[count]='\\0')) \{ 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0     printf("String not accepted\'85\loch\f0 ..!!!\hich\af0\dbch\af31505\loch\f0 !"); 
\par \hich\af0\dbch\af31505\loch\f0     break; 
\par \hich\af0\dbch\af31505\loch\f0    \} else \{ 
\par \hich\af0\dbch\af31505\loch\f0     printf("String accepted"); 
\par \hich\af0\dbch\af31505\loch\f0    \} 
\par \hich\af0\dbch\af31505\loch\f0   \} 
\par \hich\af0\dbch\af31505\loch\f0  \} 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 The grammar is: S->aS, S->Sb, S->ab 
\par \hich\af0\dbch\af31505\loch\f0 Enter the string to be checked: \hich\af0\dbch\af31505\loch\f0 abb 
\par \hich\af0\dbch\af31505\loch\f0 String accepted}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 14                            
\par \hich\af0\dbch\af31505\loch\f0 Implement the concept of Shift reduce parsing in C Programming.  
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h>  
\par \hich\af0\dbch\af31505\loch\f0 #include<stdlib.h>  
\par \hich\af0\dbch\af31505\loch\f0 #include<conio.h>  
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0 char ip_sym[15],stack[15]; int ip_ptr=0,st_ptr=0,len,i; char temp[2],temp2[2]; 
\par \hich\af0\dbch\af31505\loch\f0 char act[15]; 
\par \hich\af0\dbch\af31505\loch\f0 void check(); int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 //clrscr(); 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n\\t\\t SHIFT REDUCE PARSER\\n"); printf("\\n GRAMMER\\n"); 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n E->E+E\\n E->E/E"); printf("\\n E->E*E\\n E->a/b"); printf("\\n enter the 
\par \hich\af0\dbch\af31505\loch\f0 input symbol:\\t"); gets(ip_sym); 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n\\t stack implementation table"); printf("\\n stack \\t\\t input symbol\\t\\t 
\par \hich\af0\dbch\af31505\loch\f0 action"); 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n 
\par \\\hich\af0\dbch\af31505\loch\f0 t\\t 
\par \\\hich\af0\dbch\af31505\loch\f0 t\\t 
\par \\\hich\af0\dbch\af31505\loch\f0 n"); 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n $\\t\\t%s$\\t\\t\\t--",ip_sym); strcpy(act,"shift "); 
\par \hich\af0\dbch\af31505\loch\f0 temp[0]=ip_sym[ip_ptr]; temp[1]='\\0'; 
\par \hich\af0\dbch\af31505\loch\f0 strcat(act,temp); len=strlen(ip_sym); for(i=0;i<=len-1;i++) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 stack[st_ptr]=ip_sym[ip_ptr]; 
\par \hich\af0\dbch\af31505\loch\f0 stack[st_ptr+1]='\\0'; ip_sym[ip_ptr]=' '; ip_ptr++; 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n $%s\\t\\t%s$\\t\\t\\t%s",stack,ip_sym,act); strcpy(act,"shift"); 
\par \hich\af0\dbch\af31505\loch\f0 temp[0]=ip_sym[ip_ptr]; temp[1]='\\0'; strcat(act,temp); check(); 
\par \hich\af0\dbch\af31505\loch\f0 st_ptr++; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 st_ptr++; check(); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 void check() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int flag=0; temp2[0]=stack[st_ptr]; temp2[1]='\\0'; 
\par \hich\af0\dbch\af31505\loch\f0 if((!strcmpi(temp2,"a"))||(!strcmpi(temp2,"b"))) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 stack[st_ptr]='E'; if(!strcmpi(temp2,"a")) 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n $%s\\t\\t%s$\\t\\t\\tE->a",stack,ip_sym); else 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n $%s\\t\\t%s$\\t\\t\\tE->b",stack,ip_sym); flag=1; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if((!strcmpi(temp2,"+"))||(strcmpi(temp2,"*"))||(!strcmpi\hich\af0\dbch\af31505\loch\f0 (temp2,"/"))) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 flag=1; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if((!strcmpi(stack,"E+E"))||(!strcmpi(stack,"E\\E"))||(!strcmpi(stack,"E*E"))) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 strcpy(stack,"E"); st_ptr=0; if(!strcmpi(stack,"E+E")) 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n $%s\\t\\t%s$\\t\\t\\tE->E+E",stack,ip_sym); else 
\par \hich\af0\dbch\af31505\loch\f0 if(!strcmpi(stack,"E\\E")) 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n $%s\\t\\t%s$\\t\\t\\tE->E\\E",stack,ip_sym); else 
\par \hich\af0\dbch\af31505\loch\f0 if(!strcmpi(stack,"E*E")) 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n $%s\\t\\t%s$\\t\\t\\tE->E*E",stack,ip_sym); else 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n $%s\\t\\t%s$\\t\\t\\tE->E+E",stack,ip_sym); flag=1; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(!strcmpi(stack,"E")&&ip_ptr==len) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n $%s\\t\\t%s$\\t\\t\\tACCEPT",stack,ip_sym); getch(); 
\par \hich\af0\dbch\af31505\loch\f0 exit(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(flag==0) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n%s\\t\\t\\t%s\\t\\t reject",stack,ip_sym); exit(0); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 return; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par \hich\af0\dbch\af31505\loch\f0 SHIFT REDUCE PARSER 
\par \hich\af0\dbch\af31505\loch\f0 GRAMMER}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  E->E+E 
\par \hich\af0\dbch\af31505\loch\f0  E->E/E 
\par \hich\af0\dbch\af31505\loch\f0  E->E*E 
\par \hich\af0\dbch\af31505\loch\f0  E->a/b 
\par \hich\af0\dbch\af31505\loch\f0  enter the input symbol: \hich\af0\dbch\af31505\loch\f0 a+b 
\par \hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\f0\kerning0\insrsid5786600\charrsid5786600 \hich\af0\dbch\af31505\loch\f0          }{\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\f0\kerning0\insrsid5786600\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 STACK IMPLEMENTATION TABLE }{\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\f0\kerning0\insrsid3873325\charrsid5786600 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  stack           input symbol            action 
\par \hich\af0\dbch\af31505\loch\f0  $               a+b$                    -- 
\par \hich\af0\dbch\af31505\loch\f0  $a               +b$                    shift a 
\par \hich\af0\dbch\af31505\loch\f0  $E               +b$                    E->a 
\par \hich\af0\dbch\af31505\loch\f0  $E+               b$                    shift+ 
\par \hich\af0\dbch\af31505\loch\f0  $E+b              $                    shiftb 
\par \hich\af0\dbch\af31505\loch\f0  $E+E              $                    E->b 
\par \hich\af0\dbch\af31505\loch\f0  $E                 $                    E->E+E 
\par \hich\af0\dbch\af31505\loch\f0  $E                 $                    ACCEPT}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 15                            
\par \hich\af0\dbch\af31505\loch\f0 Write a C Program to implement the operator precedence parsing. 
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 char *input; 
\par \hich\af0\dbch\af31505\loch\f0 int i=0; 
\par \hich\af0\dbch\af31505\loch\f0 char lasthandle[6],stack[50],handles[][5]=\{")E(","E*E","E+E","i","E^E"\}; 
\par \hich\af0\dbch\af31505\loch\f0 //(E) becomes )E( when pushed to stack 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int top=0,l; 
\par \hich\af0\dbch\af31505\loch\f0 char prec[9][9]=\{ 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0                             \hich\af0\dbch\af31505\loch\f0 /\hich\af0\dbch\af31505\loch\f0 *\hich\af0\dbch\af31505\loch\f0 input\hich\af0\dbch\af31505\loch\f0 *\hich\af0\dbch\af31505\loch\f0 /\hich\af0\dbch\af31505\loch\f0  

\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*stack    +    -   *   /   ^   i   (   )   $  */ 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*  + */  '>', '>','<','<','<','<','<','>','>', 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*  - */  '>', '>','<','<','<','<','<','>','>', 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*  * */  '>', '>','>','>','<','<','<','>','>', 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*  / */  '>', '>','>','>','<','<','<','>','>', 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*  ^ */  '>', '>','>','>','<','<','<','>','>', 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*  i */  '>', '>','>','>','>','e','e','>','>', 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*  ( */  '<', '<','<','<','<','<','<','>','e', 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*  ) */  '>', '>','>','>','>','e','e','>','>', 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             /*  $ */  '<', '<','<','<','<','<','<','<','>', 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0                 \}; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int getindex(char c) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 switch(c) 
\par \hich\af0\dbch\af31505\loch\f0     \{ 
\par \hich\af0\dbch\af31505\loch\f0     case '+':return 0; 
\par \hich\af0\dbch\af31505\loch\f0     case '-':return 1; 
\par \hich\af0\dbch\af31505\loch\f0     case '*':return 2; 
\par \hich\af0\dbch\af31505\loch\f0     case '/':return 3; 
\par \hich\af0\dbch\af31505\loch\f0     case '^':return 4; 
\par \hich\af0\dbch\af31505\loch\f0     case 'i':return 5; 
\par \hich\af0\dbch\af31505\loch\f0     case '(':return 6; 
\par \hich\af0\dbch\af31505\loch\f0     case ')':return 7; 
\par \hich\af0\dbch\af31505\loch\f0     case '$':return 8; 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int shift() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 stack[++top]=*(input+i++); 
\par \hich\af0\dbch\af31505\loch\f0 stack[top+1]='\\0'; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int reduce() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int i,len,found,t; 
\par \hich\af0\dbch\af31505\loch\f0 for(i=0;i<5;i++)//selecting handles 
\par \hich\af0\dbch\af31505\loch\f0     \{ 
\par \hich\af0\dbch\af31505\loch\f0     len=strlen(handles[i]); 
\par \hich\af0\dbch\af31505\loch\f0     if(stack[top]==handles[i][0]&&top+1>=len) 
\par \hich\af0\dbch\af31505\loch\f0         \{ 
\par \hich\af0\dbch\af31505\loch\f0         found=1; 
\par \hich\af0\dbch\af31505\loch\f0         for(t=0;t<len;t++) 
\par \hich\af0\dbch\af31505\loch\f0             \{ 
\par \hich\af0\dbch\af31505\loch\f0             if(stack[top-t]!=handles[i][t]) 
\par \hich\af0\dbch\af31505\loch\f0                 \{ 
\par \hich\af0\dbch\af31505\loch\f0                 found=0; 
\par \hich\af0\dbch\af31505\loch\f0                 break; 
\par \hich\af0\dbch\af31505\loch\f0                 \} 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0         if(found==1) 
\par \hich\af0\dbch\af31505\loch\f0             \{ 
\par \hich\af0\dbch\af31505\loch\f0             stack[top-t+1]='E'; 
\par \hich\af0\dbch\af31505\loch\f0             top=top-t+1; 
\par \hich\af0\dbch\af31505\loch\f0             strcpy(lasthandle,handles[i\hich\af0\dbch\af31505\loch\f0 ]); 
\par \hich\af0\dbch\af31505\loch\f0             stack[top+1]='\\0'; 
\par \hich\af0\dbch\af31505\loch\f0             return 1;//successful reduction 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0    \} 
\par \hich\af0\dbch\af31505\loch\f0 return 0; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 void dispstack() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int j; 
\par \hich\af0\dbch\af31505\loch\f0 for(j=0;j<=top;j++) 
\par \hich\af0\dbch\af31505\loch\f0     printf("%c",stack[j]); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 void dispinput() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int j; 
\par \hich\af0\dbch\af31505\loch\f0 for(j=i;j<l;j++) 
\par \hich\af0\dbch\af31505\loch\f0     printf("%c",*(input+j)); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 void main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int j; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 input=(char*)malloc(50*sizeof(char)); 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\nEnter the string\\n"); 
\par \hich\af0\dbch\af31505\loch\f0 scanf("%s",input); 
\par \hich\af0\dbch\af31505\loch\f0 input=strcat(input,"$"); 
\par \hich\af0\dbch\af31505\loch\f0 l=strlen(input); 
\par \hich\af0\dbch\af31505\loch\f0 strcpy(stack,"$"); 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\nSTACK\\tINPUT\\tACTION"); 
\par \hich\af0\dbch\af31505\loch\f0 while(i<=l) 
\par \hich\af0\dbch\af31505\loch\f0  \{ 
\par \hich\af0\dbch\af31505\loch\f0  shift(); 
\par \hich\af0\dbch\af31505\loch\f0  printf("\\n"); 
\par \hich\af0\dbch\af31505\loch\f0  dispstack(); 
\par \hich\af0\dbch\af31505\loch\f0  printf("\\t"); 
\par \hich\af0\dbch\af31505\loch\f0  dispinput(); 
\par \hich\af0\dbch\af31505\loch\f0  printf("\\tShift"); 
\par \hich\af0\dbch\af31505\loch\f0  if(prec[getindex(stack[top])][getindex(input[i])]=='>') 
\par \hich\af0\dbch\af31505\loch\f0   \{ 
\par \hich\af0\dbch\af31505\loch\f0   while(reduce()) 
\par \hich\af0\dbch\af31505\loch\f0    \{ 
\par \hich\af0\dbch\af31505\loch\f0    printf("\\n"); 
\par \hich\af0\dbch\af31505\loch\f0    dispstack(); 
\par \hich\af0\dbch\af31505\loch\f0    printf("\\t"); 
\par \hich\af0\dbch\af31505\loch\f0    dispinput(); 
\par \hich\af0\dbch\af31505\loch\f0    printf("\\tReduced: E->%s",lasthandle); 
\par \hich\af0\dbch\af31505\loch\f0    \} 
\par \hich\af0\dbch\af31505\loch\f0   \} 
\par \hich\af0\dbch\af31505\loch\f0  \} 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 if(strcmp(stack,"$E$")==0) 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nAccepted;"); 
\par \hich\af0\dbch\af31505\loch\f0 else 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\nNot Accepted;"); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Enter the string }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 \hich\af0\dbch\af31505\loch\f0 : }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 i*(i+i)*i 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 STACK   INPUT   ACTION 
\par \hich\af0\dbch\af31505\loch\f0 $i      *(i+i)*i$       Shift 
\par \hich\af0\dbch\af31505\loch\f0 $E      *(i+i)*i$       Reduced: E->i 
\par \hich\af0\dbch\af31505\loch\f0 $E*     (i+i)*i$        Shift 
\par \hich\af0\dbch\af31505\loch\f0 $E*(    i+i)*i$   Shift 
\par \hich\af0\dbch\af31505\loch\f0 $E*(i   +i)*i$    Shift 
\par \hich\af0\dbch\af31505\loch\f0 $E*(E   +i)*i$   Reduced: E->i 
\par \hich\af0\dbch\af31505\loch\f0 $E*(E+  i)*i$    Shift 
\par \hich\af0\dbch\af31505\loch\f0 $E*(E+i )*i$     Shift 
\par \hich\af0\dbch\af31505\loch\f0 $E*(E+E )*i$     Reduced: E->i 
\par \hich\af0\dbch\af31505\loch\f0 $E*(E   )*i$    Reduced: E->E+E 
\par \hich\af0\dbch\af31505\loch\f0 $E*(E)  *i$     Shift 
\par \hich\af0\dbch\af31505\loch\f0 $E*E    *i$     Reduced: E->)E( 
\par \hich\af0\dbch\af31505\loch\f0 $E      *i$     Reduced: E->E*E 
\par \hich\af0\dbch\af31505\loch\f0 $E*     
\par \hich\af0\dbch\af31505\loch\f0 i$      
\par \hich\af0\dbch\af31505\loch\f0 $E*i    
\par \hich\af0\dbch\af31505\loch\f0 $       
\par \hich\af0\dbch\af31505\loch\f0 Shift 
\par \hich\af0\dbch\af31505\loch\f0 Shift 
\par \hich\af0\dbch\af31505\loch\f0 $E*E    $       Reduced: E->i 
\par \hich\af0\dbch\af31505\loch\f0 $E      $\hich\af0\dbch\af31505\loch\f0        Reduced: E->E*E 
\par \hich\af0\dbch\af31505\loch\f0 $E$             
\par \hich\af0\dbch\af31505\loch\f0 Shift 
\par \hich\af0\dbch\af31505\loch\f0 $E$             
\par \hich\af0\dbch\af31505\loch\f0 Accepted;}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 16                            
\par \hich\af0\dbch\af31505\loch\f0 Write a C Program to Generate the Three address code representation 
\par \hich\af0\dbch\af31505\loch\f0 for the given input statement. 
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<conio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<stdlib.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0 struct three 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 char data[10],temp[7]; 
\par \}\hich\af0\dbch\af31505\loch\f0 s[30]; 
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 char d1[7],d2[7]="t"; 
\par \hich\af0\dbch\af31505\loch\f0 int i=0,j=1,len=0; 
\par \hich\af0\dbch\af31505\loch\f0 FILE *f1,*f2; 
\par \hich\af0\dbch\af31505\loch\f0 //clrscr(); 
\par \hich\af0\dbch\af31505\loch\f0 f1=fopen("sum.txt","r"); 
\par \hich\af0\dbch\af31505\loch\f0 f2=fopen("out.txt","w"); 
\par \hich\af0\dbch\af31505\loch\f0 while(fscanf(f1,"%s",s[len].data)!=EOF) 
\par \hich\af0\dbch\af31505\loch\f0 len++; 
\par \hich\af0\dbch\af31505\loch\f0 itoa(j,d1,7); 
\par \hich\af0\dbch\af31505\loch\f0 strcat(d2,d1); 
\par \hich\af0\dbch\af31505\loch\f0 strcpy(s[j].temp,d2); 
\par \hich\af0\dbch\af31505\loch\f0 strcpy(d1,""); 
\par \hich\af0\dbch\af31505\loch\f0 strcpy(d2,"t"); 
\par \hich\af0\dbch\af31505\loch\f0 if(!strcmp(s[3].data,"+")) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 fprintf(f2,"%s=%s+%s",s[j].temp,s[i+2].data,s[i+4].data); 
\par \hich\af0\dbch\af31505\loch\f0 j++; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 else if(!strcmp(s[3].data,"-")) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 fprintf(f2,"%s=%s-%s",s[j].temp,s[i+2].data,s[i+4].data); 
\par \hich\af0\dbch\af31505\loch\f0 j++; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 for(i=4;i<len-2;i+=2) 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 itoa(j,d1,7); 
\par \hich\af0\dbch\af31505\loch\f0 strcat(d2,d1); 
\par \hich\af0\dbch\af31505\loch\f0 strcpy(s[j].temp,d2); 
\par \hich\af0\dbch\af31505\loch\f0 if(!strcmp(s[i+1].data,"+")) 
\par \hich\af0\dbch\af31505\loch\f0 fprintf(f2,"\\n%s=%s+%s",s[j].temp,s[j-1].temp,s[i+2].data); 
\par \hich\af0\dbch\af31505\loch\f0 else if(!strcmp(s[i+1].data,"-")) 
\par \hich\af0\dbch\af31505\loch\f0 fprintf(f2,"\\n%s=%s-%s",s[j].temp,s[j-1].temp,s[i+2].data); 
\par \hich\af0\dbch\af31505\loch\f0 strcpy(d1,""); 
\par \hich\af0\dbch\af31505\loch\f0 strcpy(d2\hich\af0\dbch\af31505\loch\f0 ,"t"); 
\par \hich\af0\dbch\af31505\loch\f0 j++; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 fprintf(f2,"\\n%s=%s",s[0].data,s[j-1].temp); 
\par \hich\af0\dbch\af31505\loch\f0 fclose(f1); 
\par \hich\af0\dbch\af31505\loch\f0 fclose(f2); 
\par \hich\af0\dbch\af31505\loch\f0 getch(); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 Input:  sum.txt 
\par \hich\af0\dbch\af31505\loch\f0 out = in1 + in2 + in3 - in4 
\par \hich\af0\dbch\af31505\loch\f0 Output:  out.txt 
\par \hich\af0\dbch\af31505\loch\f0 t1=in1+in2 
\par \hich\af0\dbch\af31505\loch\f0 t2=t1+in3 
\par \hich\af0\dbch\af31505\loch\f0 t3=t2-in4 
\par \hich\af0\dbch\af31505\loch\f0 out=t3}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 17                           
\par \hich\af0\dbch\af31505\loch\f0 Write a C program for implementing a Lexical Analyzer to Scan and 
\par \hich\af0\dbch\af31505\loch\f0 Count the number of characters, words, and lines in a file. 
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include <stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     char str[100];//input string with size 100 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     int words=0,newline=0,characters=0; // counter variables 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     scanf("%[^~]",&str);//scanf formatting     
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     for(int i=0;str[i]!='\\0';i++) 
\par \hich\af0\dbch\af31505\loch\f0      \{  
\par \hich\af0\dbch\af31505\loch\f0          if(str[i] == ' ') 
\par \hich\af0\dbch\af31505\loch\f0          \{  
\par \hich\af0\dbch\af31505\loch\f0               words++; 
\par \hich\af0\dbch\af31505\loch\f0          \} 
\par \hich\af0\dbch\af31505\loch\f0          else if(str[i] == '\\n') 
\par \hich\af0\dbch\af31505\loch\f0          \{ 
\par \hich\af0\dbch\af31505\loch\f0              newline++; 
\par \hich\af0\dbch\af31505\loch\f0               words++;//since with every next line new words start. corner case 1 
\par \hich\af0\dbch\af31505\loch\f0          \} 
\par \hich\af0\dbch\af31505\loch\f0          else if(str[i] != ' ' && str[i] != '\\n')\{ 
\par \hich\af0\dbch\af31505\loch\f0          characters++; 
\par \hich\af0\dbch\af31505\loch\f0          \} 
\par \hich\af0\dbch\af31505\loch\f0      \} 
\par \hich\af0\dbch\af31505\loch\f0     if(characters > 0)//Corner case 2,3. 
\par \hich\af0\dbch\af31505\loch\f0     \{ 
\par \hich\af0\dbch\af31505\loch\f0         words++; 
\par \hich\af0\dbch\af31505\loch\f0         newline++; 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0      printf("Total number of words : %d\\n",words); 
\par \hich\af0\dbch\af31505\loch\f0      printf("Total number of lines : %d\\n",newline); 
\par \hich\af0\dbch\af31505\loch\f0      printf("Total number of characters : %d\\n",ch\hich\af0\dbch\af31505\loch\f0 aracters); 
\par \hich\af0\dbch\af31505\loch\f0     return 0; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 void main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int a; 
\par \hich\af0\dbch\af31505\loch\f0 int b; 
\par \hich\af0\dbch\af31505\loch\f0 a = b + c; 
\par \hich\af0\dbch\af31505\loch\f0 c = d * e; 
\par \}\hich\af0\dbch\af31505\loch\f0 ~ 
\par \hich\af0\dbch\af31505\loch\f0 Total number of words : 18 
\par \hich\af0\dbch\af31505\loch\f0 Total number of lines : 7}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 18                           
\par \hich\af0\dbch\af31505\loch\f0 Write a C program to implement the back end of the compiler. 
\par \hich\af0\dbch\af31505\loch\f0 Program:}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<conio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<string.h> 
\par \hich\af0\dbch\af31505\loch\f0 int main() 
\par \{\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  int n,i,j; 
\par \hich\af0\dbch\af31505\loch\f0  char a[50][50]; 
\par \hich\af0\dbch\af31505\loch\f0  printf("enter the no: intermediate code:"); 
\par \hich\af0\dbch\af31505\loch\f0  scanf("%d",&n); 
\par \hich\af0\dbch\af31505\loch\f0  for(i=0;i<n;i++) 
\par \hich\af0\dbch\af31505\loch\f0  \{ 
\par \hich\af0\dbch\af31505\loch\f0   printf("enter the 3 address code:%d:",i+1); 
\par \hich\af0\dbch\af31505\loch\f0   for(j=0;j<6;j++) 
\par \hich\af0\dbch\af31505\loch\f0   \{ 
\par \hich\af0\dbch\af31505\loch\f0    scanf("%c",&a[i][j]); 
\par \hich\af0\dbch\af31505\loch\f0   \} 
\par \hich\af0\dbch\af31505\loch\f0  \} 
\par \hich\af0\dbch\af31505\loch\f0  printf("the generated code is:"); 
\par \hich\af0\dbch\af31505\loch\f0  for(i=0;i<n;i++) 
\par \hich\af0\dbch\af31505\loch\f0  \{ 
\par \hich\af0\dbch\af31505\loch\f0   printf("\\n mov %c,R%d",a[i][3],i); 
\par \hich\af0\dbch\af31505\loch\f0   if(a[i][4]=='-') 
\par \hich\af0\dbch\af31505\loch\f0   \{ 
\par \hich\af0\dbch\af31505\loch\f0    printf("\\n sub %c,R%d",a[i][5],i); 
\par \hich\af0\dbch\af31505\loch\f0   \} 
\par \hich\af0\dbch\af31505\loch\f0   if(a[i][4]=='+') 
\par \hich\af0\dbch\af31505\loch\f0   \{ 
\par \hich\af0\dbch\af31505\loch\f0    printf("\\n add %c,\hich\af0\dbch\af31505\loch\f0 R%d",a[i][5],i); 
\par \hich\af0\dbch\af31505\loch\f0   \} 
\par \hich\af0\dbch\af31505\loch\f0   if(a[i][4]=='*') 
\par \hich\af0\dbch\af31505\loch\f0   \{ 
\par \hich\af0\dbch\af31505\loch\f0    printf("\\n mul %c,R%d",a[i][5],i); 
\par \hich\af0\dbch\af31505\loch\f0   \} 
\par \hich\af0\dbch\af31505\loch\f0   if(a[i][4]=='/') 
\par \hich\af0\dbch\af31505\loch\f0   \{ 
\par \hich\af0\dbch\af31505\loch\f0    printf("\\n div %c,R%d",a[i][5],i); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n mov R%d,%c",i,a[i][1]); 
\par \hich\af0\dbch\af31505\loch\f0 printf("\\n"); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 return 0; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 enter the no: intermediate code:2 
\par \hich\af0\dbch\af31505\loch\f0 enter the 3 address code:1:a=b+c 
\par \hich\af0\dbch\af31505\loch\f0 enter the 3 address code:2:d=n*d 
\par \hich\af0\dbch\af31505\loch\f0 the generated code is: 
\par \hich\af0\dbch\af31505\loch\f0 mov a,R0 
\par \hich\af0\dbch\af31505\loch\f0 add c,R0 
\par \hich\af0\dbch\af31505\loch\f0 mov R0,a 
\par \hich\af0\dbch\af31505\loch\f0 mov n,R1 
\par \hich\af0\dbch\af31505\loch\f0 mul d,R1 
\par \hich\af0\dbch\af31505\loch\f0 mov R1,d}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 19                           
\par \hich\af0\dbch\af31505\loch\f0 Write a C program to compute LEADING( ) \hich\f0 \endash \loch\f0  operator precedence 
\par \hich\af0\dbch\af31505\loch\f0 parser for the given grammar 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0    E \u8594\'3f\loch\f0  E + T | T 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0    T \u8594\'3f\loch\f0  T * F | F 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0    F \u8594\'3f\loch\f0  ( E ) | id 
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 #include<conio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 char arr[18][3] =\{\{'E', '+', 'F'\},\{'E', '*', 'F'\},\{'E', '(', 'F'\}, \{'E', ')', 'F'\},\{'E', 'i', 'F'\},\{'E', '$', 'F'\}, 
\par \{\hich\af0\dbch\af31505\loch\f0 'F', '+', 'F'\},\{'F', '*', 'F'\},\{'F', '(', 'F'\},\{'F', ')', 'F'\},\{'F', 'i', 'F'\},\{'F', '$', 'F'\}, \{'T', '+', 'F'\}, 
\par \{\hich\af0\dbch\af31505\loch\f0 'T', '*', 'F'\}, \{'T', '(', 'F'\},\{'T', ')', 'F'\},\{'T', 'i', 'F'\},\{'T', '$', 'F'\}\}; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 char prod[] = "EETTFF"; 
\par \hich\af0\dbch\af31505\loch\f0 char res[6][3] =\{ \{'E', '+', 'T'\}, \{'T', '\\0'\}, \{'T', '*', 'F'\},  \{'F', '\\0'\}, \{'(', 'E', ')'\}, \{'i', '\\0'\}\}; 
\par \hich\af0\dbch\af31505\loch\f0 char stack [5][2]; 
\par \hich\af0\dbch\af31505\loch\f0 int top = -1; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 void install(char p\hich\af0\dbch\af31505\loch\f0 ro, char re) \{ 
\par \hich\af0\dbch\af31505\loch\f0     int i; 
\par \hich\af0\dbch\af31505\loch\f0     for (i = 0; i < 18; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0         if (arr[i][0] == pro && arr[i][1] == re) \{ 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             arr[i][2] = 'T'; 
\par \hich\af0\dbch\af31505\loch\f0             break; 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     ++top; 
\par \hich\af0\dbch\af31505\loch\f0     stack[top][0] = pro; 
\par \hich\af0\dbch\af31505\loch\f0     stack[top][1] = re; 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int main() \{ 
\par \hich\af0\dbch\af31505\loch\f0     int i = 0, j; 
\par \hich\af0\dbch\af31505\loch\f0     char pro, re, pri = ' '; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     for (i = 0; i < 6; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0         for (j = 0; j < 3 && res[i][j] != '\\0'; ++j) \{ 
\par \hich\af0\dbch\af31505\loch\f0             if (res[i][j] == '+' || res[i][j] == '*' || res[i][j] == '(' || res[i][j] == ')' || res[i][j] == 
\par \hich\af0\dbch\af31505\loch\f0 'i' || res[i][j] == '$') \{ 
\par \hich\af0\dbch\af31505\loch\f0                 install(prod[i], res[i][j]); 
\par \hich\af0\dbch\af31505\loch\f0                 break; 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     while (top >= 0) \{ 
\par \hich\af0\dbch\af31505\loch\f0         pro = stack[top][0]; 
\par \hich\af0\dbch\af31505\loch\f0         r\hich\af0\dbch\af31505\loch\f0 e = stack[top][1]; 
\par \hich\af0\dbch\af31505\loch\f0         --top; 
\par \hich\af0\dbch\af31505\loch\f0         for (i = 0; i < 6; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0             if (res[i][0] == pro && res[i][0] != prod[i]) \{ 
\par \hich\af0\dbch\af31505\loch\f0                 install(prod[i], re); 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     for (i = 0; i < 18; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0         printf("\\n\\t"); 
\par \hich\af0\dbch\af31505\loch\f0         for (j = 0; j < 3; ++j) 
\par \hich\af0\dbch\af31505\loch\f0             printf("%c\\t", arr[i][j]); 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     getch(); 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n\\n"); 
\par \hich\af0\dbch\af31505\loch\f0     for (i = 0; i < 18; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0         if (pri != arr[i][0]) \{ 
\par \hich\af0\dbch\af31505\loch\f0             pri = arr[i][0]; 
\par \hich\af0\dbch\af31505\loch\f0             printf("\\n\\t%c -> ", pri); 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0         if (arr[i][2] == 'T') 
\par \hich\af0\dbch\af31505\loch\f0             printf("%c ", arr[i][1]); 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     getch(); 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0         E       +       T 
\par \hich\af0\dbch\af31505\loch\f0         E       *       T 
\par \hich\af0\dbch\af31505\loch\f0         E       (       T 
\par \hich\af0\dbch\af31505\loch\f0         E       )       F 
\par \hich\af0\dbch\af31505\loch\f0         E       i       T 
\par \hich\af0\dbch\af31505\loch\f0         E       $       F 
\par \hich\af0\dbch\af31505\loch\f0         F       +       F 
\par \hich\af0\dbch\af31505\loch\f0         F       *       F 
\par \hich\af0\dbch\af31505\loch\f0         F       (       T 
\par \hich\af0\dbch\af31505\loch\f0         F       )       F 
\par \hich\af0\dbch\af31505\loch\f0         F       i       T 
\par \hich\af0\dbch\af31505\loch\f0         F       $       F 
\par \hich\af0\dbch\af31505\loch\f0         T       +       F 
\par \hich\af0\dbch\af31505\loch\f0         T       *       T 
\par \hich\af0\dbch\af31505\loch\f0         T       (       T 
\par \hich\af0\dbch\af31505\loch\f0         T       )       F 
\par \hich\af0\dbch\af31505\loch\f0         T       i       T 
\par \hich\af0\dbch\af31505\loch\f0         T       $       F 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0         E -> + * ( i 
\par \hich\af0\dbch\af31505\loch\f0         F -> ( i 
\par \hich\af0\dbch\af31505\loch\f0         T -> * ( i}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Exp. No. 20                           
\par \hich\af0\dbch\af31505\loch\f0 Write a C program to compute TRAILING( ) \hich\f0 \endash \loch\f0  operator precedence 
\par \hich\af0\dbch\af31505\loch\f0 parser for the given grammar 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0    E \u8594\'3f\loch\f0  E + T | T 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0    T \u8594\'3f\loch\f0  T * F | F 
\par \hich\af0\dbch\af31505\loch\f0 \hich\f0    F \u8594\'3f\loch\f0  ( E ) | id 
\par \hich\af0\dbch\af31505\loch\f0 Program: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 #include<conio.h> 
\par \hich\af0\dbch\af31505\loch\f0 #include<stdio.h> 
\par \hich\af0\dbch\af31505\loch\f0 char arr[18][3] =\{\{'E', '+', 'F'\},  \{'E', '*', 'F'\}, \{'E', '(', 'F'\},    \{'E', ')', 'F'\},    \{'E', 'i', 'F'\}, 
\par \hich\af0\dbch\af31505\loch\f0     \{'E', '$', 'F'\},    \{'F', '+', 'F'\},    \{'F', '*', 'F'\},    \{'F', '(', 'F'\},    \{'F', ')', 'F'\},    \{'F', 'i', 'F'\}, 
\par \hich\af0\dbch\af31505\loch\f0     \{'F', '$', 'F'\},    \{'T', '+', 'F'\},    \{'T', '*', 'F'\},    \{'T', '(', 'F'\},    \{'T', ')', 'F'\},    \{'T', 'i', 'F'\}, 
\par \hich\af0\dbch\af31505\loch\f0     \{'T', '$', 'F'\}, 
\par \}\hich\af0\dbch\af31505\loch\f0 ; 
\par \hich\af0\dbch\af31505\loch\f0 char prod[6] = "EETTFF"; 
\par \hich\af0\dbch\af31505\loch\f0 char res[6][3] =\{    \{'E', '+', 'T'\},    \{'T', '\\0', '\\0'\},    \{'T', '*', 'F'\},    \{'F', '\\0', '\\0'\},    \{'(', 'E', 
\par \hich\af0\dbch\af31505\loch\f0 ')'\},   \{'i', '\\0', '\\0'\},\}; 
\par \hich\af0\dbch\af31505\loch\f0 char stack [5][2]; 
\par \hich\af0\dbch\af31505\loch\f0 int top = -1; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 void install(char pro, char re) \{ 
\par \hich\af0\dbch\af31505\loch\f0     int i; 
\par \hich\af0\dbch\af31505\loch\f0     for (i = 0; i < 18; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0         if (arr[i][0] == pro && arr[i][1] == re) \{ 
\par \hich\af0\dbch\af31505\loch\f0             ++top; 
\par \hich\af0\dbch\af31505\loch\f0             arr[i][2] = 'T'; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             stack[top][0] = pro; 
\par \hich\af0\dbch\af31505\loch\f0             stack[top][1] = re; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             break;  // Added break to exit the loop when the match is found 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \}\hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0 int main() \{ 
\par \hich\af0\dbch\af31505\loch\f0     int i = 0, j; 
\par \hich\af0\dbch\af31505\loch\f0     char pro, re, pri = ' '; 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0      
\par \hich\af0\dbch\af31505\loch\f0     for (i = 0; i < 6; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0         for (j = 2; j >= 0; --j) \{ 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0             if (res[i][j] == '+' || res[i][j] == '*' || res[i][j] == '(' || res[i][j] == ')' || res[i][j] == 
\par \hich\af0\dbch\af31505\loch\f0 'i' || res[i][j] == '$') \{ 
\par \hich\af0\dbch\af31505\loch\f0                 install(prod[i], res[i][j]); 
\par \hich\af0\dbch\af31505\loch\f0                 break; 
\par \hich\af0\dbch\af31505\loch\f0             \} else if (res[i][j] == 'E' || res[i][j] == 'F' || res[i][j] == 'T') \{ 
\par \hich\af0\dbch\af31505\loch\f0                 if (res[i][j - 1] == '+' || res[i][j - 1] == '*' || res[i][j - 1] == '(' || res[i][j - 
\par \hich\af0\dbch\af31505\loch\f0                         1] == ')' || res[i][j - 1] == 'i' || res[i][j - 1] == '$') \{ 
\par \hich\af0\dbch\af31505\loch\f0                     install(pr\hich\af0\dbch\af31505\loch\f0 od[i], res[i][j - 1]); 
\par \hich\af0\dbch\af31505\loch\f0                     break; 
\par \hich\af0\dbch\af31505\loch\f0                 \} 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0     while (top >= 0) \{ 
\par \hich\af0\dbch\af31505\loch\f0         pro = stack[top][0]; 
\par \hich\af0\dbch\af31505\loch\f0         re = stack[top][1]; 
\par \hich\af0\dbch\af31505\loch\f0         --top; 
\par \hich\af0\dbch\af31505\loch\f0         for (i = 0; i < 6; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0             for (j = 2; j >= 0; --j) \{ 
\par \hich\af0\dbch\af31505\loch\f0                 if (res[i][0] == pro && res[i][0] != prod[i]) \{ 
\par \hich\af0\dbch\af31505\loch\f0                     install(prod[i], re); 
\par \hich\af0\dbch\af31505\loch\f0                     break; 
\par \hich\af0\dbch\af31505\loch\f0                 \} else if (res[i][0] != '\\0') break; 
\par \hich\af0\dbch\af31505\loch\f0             \} 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     for (\hich\af0\dbch\af31505\loch\f0 i = 0; i < 18; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0         printf("\\n\\t"); 
\par \hich\af0\dbch\af31505\loch\f0         for (j = 0; j < 3; ++j) 
\par \hich\af0\dbch\af31505\loch\f0             printf("%c\\t", arr[i][j]); 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0     printf("\\n\\n"); 
\par \hich\af0\dbch\af31505\loch\f0     for (i = 0; i < 18; ++i) \{ 
\par \hich\af0\dbch\af31505\loch\f0         if (pri != arr[i][0]) \{ 
\par \hich\af0\dbch\af31505\loch\f0             pri = arr[i][0]; 
\par \hich\af0\dbch\af31505\loch\f0             printf("\\n\\t%c -> ", pri); 
\par \hich\af0\dbch\af31505\loch\f0         \} 
\par \hich\af0\dbch\af31505\loch\f0         if (arr[i][2] == 'T') 
\par \hich\af0\dbch\af31505\loch\f0             printf("%c ", arr[i][1]);\} 
\par \hich\af0\dbch\af31505\loch\f0     \} 
\par \hich\af0\dbch\af31505\loch\f0  
\par }{\rtlch\fcs1 \ab\af0\afs28 \ltrch\fcs0 \b\f0\fs28\kerning0\insrsid3873325\charrsid5786600 \hich\af0\dbch\af31505\loch\f0 Output: 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0  
\par \hich\af0\dbch\af31505\loch\f0         E       +       F 
\par \hich\af0\dbch\af31505\loch\f0         E       *       F 
\par \hich\af0\dbch\af31505\loch\f0         E       (       F 
\par \hich\af0\dbch\af31505\loch\f0         E       )       F 
\par \hich\af0\dbch\af31505\loch\f0         E       i       F 
\par \hich\af0\dbch\af31505\loch\f0         E       $       F 
\par \hich\af0\dbch\af31505\loch\f0         F       +       F 
\par \hich\af0\dbch\af31505\loch\f0         F       *       F 
\par \hich\af0\dbch\af31505\loch\f0         F       (       F 
\par \hich\af0\dbch\af31505\loch\f0         F       )       F 
\par \hich\af0\dbch\af31505\loch\f0         F       i       F 
\par \hich\af0\dbch\af31505\loch\f0         F       $       F 
\par \hich\af0\dbch\af31505\loch\f0         T       +       F 
\par \hich\af0\dbch\af31505\loch\f0         T       *       F 
\par \hich\af0\dbch\af31505\loch\f0         T       (       F 
\par \hich\af0\dbch\af31505\loch\f0         T       )       F 
\par \hich\af0\dbch\af31505\loch\f0         T       i       F 
\par \hich\af0\dbch\af31505\loch\f0         T       $       F 
\par \hich\af0\dbch\af31505\loch\f0  \hich\af0\dbch\af31505\loch\f0 E -> 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid5786600 \hich\af0\dbch\af31505\loch\f0  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 \hich\af0\dbch\af31505\loch\f0 F -> 
\par \hich\af0\dbch\af31505\loch\f0  \hich\af0\dbch\af31505\loch\f0 T ->}{\rtlch\fcs1 \af0 \ltrch\fcs0 \f0\kerning0\insrsid3873325\charrsid3873325 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b030414000600080000002100b6f4679893070000c9200000160000007468656d652f7468656d652f
7468656d65312e786d6cec59cd8b1bc915bf07f23f347d97f5d5ad8fc1f2a24fcfda33b6b164873dd648a5eef2547789aad28cc56208de532e81c026e49085bd
ed21842cecc22eb9e48f31d8249b3f22afaa5bdd5552c99e191c3061463074977eefd5afde7bf5de53d5ddcf5e26d4bbc05c1096f6fcfa9d9aefe174ce16248d
7afeb3d9a4d2f13d2151ba4094a5b8e76fb0f03fbbf7eb5fdd454732c609f6403e1547a8e7c752ae8eaa5531876124eeb0154ee1bb25e30992f0caa3ea82a34b
d09bd06aa3566b55134452df4b51026a1f2f97648ebd9952e9dfdb2a1f53784da5500373caa74a35b6243476715e5708b11143cabd0b447b3eccb3609733fc52
fa1e4542c2173dbfa6fffceabdbb5574940b517940d6909be8bf5c2e17589c37f49c3c3a2b260d823068f50bfd1a40e53e6edc1eb7c6ad429f06a0f91c569a71
b175b61bc320c71aa0ecd1a17bd41e35eb16ded0dfdce3dc0fd5c7c26b50a63fd8c34f2643b0a285d7a00c1feee1c3417730b2f56b50866fede1dbb5fe28685b
fa3528a6243ddf43d7c25673b85d6d0159327aec8477c360d26ee4ca4b144443115d6a8a254be5a1584bd00bc6270050408a24493db959e1259a43140f112567
9c7827248a21f056286502866b8ddaa4d684ffea13e827ed5174849121ad780113b137a4f87862cec94af6fc07a0d537206f7ffef9cdeb1fdfbcfee9cd575fbd
79fdf77c6eadca923b466964cafdf2dd1ffef3cd6fbd7ffff0ed2f5fff319b7a172f4cfcbbbffdeedd3ffef93ef5b0e2d2146ffff4fdbb1fbf7ffbe7dfffebaf
5f3bb4f7393a33e1339260e13dc297de5396c0021dfcf119bf9ec42c46c494e8a791402952b338f48f656ca11f6d10450edc00db767cce21d5b880f7d72f2cc2
d398af2571687c182716f094313a60dc6985876a2ec3ccb3751ab927e76b13f714a10bd7dc43945a5e1eaf579063894be530c616cd2714a5124538c5d253dfb1
738c1dabfb8210cbaea764ce99604be97d41bc01224e93ccc899154da5d03149c02f1b1741f0b7659bd3e7de8051d7aa47f8c246c2de40d4417e86a965c6fb68
2d51e252394309350d7e8264ec2239ddf0b9891b0b099e8e3065de78818570c93ce6b05ec3e90f21cdb8dd7e4a37898de4929cbb749e20c64ce4889d0f6394ac
5cd829496313fbb938871045de13265df05366ef10f50e7e40e941773f27d872f787b3c133c8b026a53240d4376beef0e57dccacf89d6ee8126157aae9f3c44a
b17d4e9cd131584756689f604cd1255a60ec3dfbdcc160c05696cd4bd20f62c82ac7d815580f901dabea3dc5027a25d5dcece7c91322ac909de2881de073bad9
493c1b9426881fd2fc08bc6eda7c0ca52e7105c0633a3f37818f08f480102f4ea33c16a0c308ee835a9fc4c82a60ea5db8e375c32dff5d658fc1be7c61d1b8c2
be04197c6d1948eca6cc7b6d3343d49aa00c9819822ec3956e41c4727f29a28aab165b3be596f6a62ddd00dd91d5f42424fd6007b4d3fb84ffbbde073a8cb77f
f9c6b10f3e4ebfe3566c25ab6b763a8792c9f14e7f7308b7dbd50c195f904fbfa919a175fa04431dd9cf58b73dcd6d4fe3ffdff73487f6f36d2773a8dfb8ed64
7ce8306e3b99fc70e5e3743265f3027d8d3af0c80e7af4b14f72f0d46749289dca0dc527421ffc08f83db398c0a092d3279eb838055cc5f0a8ca1c4c60e1228e
b48cc799fc0d91f134462b381daafb4a492472d591f0564cc0a1911e76ea5678ba4e4ed9223becacd7d5c16656590592e5782d2cc6e1a04a66e856bb3cc02bd4
6bb6913e68dd1250b2d721614c6693683a48b4b783ca48fa58178ce620a157f65158741d2c3a4afdd6557b2c805ae115f8c1edc1cff49e1f06200242701e07cd
f942f92973f5d6bbda991fd3d3878c69450034d8db08283ddd555c0f2e4fad2e0bb52b78da2261849b4d425b46377822869fc17974aad1abd0b8aeafbba54b2d
7aca147a3e08ad9246bbf33e1637f535c8ede6069a9a9982a6de65cf6f35430899395af5fc251c1ac363b282d811ea3717a211dcbccc25cf36fc4d32cb8a0b39
4222ce0cae934e960d122231f728497abe5a7ee1069aea1ca2b9d51b90103e59725d482b9f1a3970baed64bc5ce2b934dd6e8c284b67af90e1b35ce1fc568bdf
1cac24d91adc3d8d1797de195df3a708422c6cd795011744c0dd413db3e682c0655891c8caf8db294c79da356fa3740c65e388ae62945714339967709dca0b3a
faadb081f196af190c6a98242f8467912ab0a651ad6a5a548d8cc3c1aafb6121653923699635d3ca2aaa6abab39835c3b60cecd8f26645de60b53531e434b3c2
67a97b37e576b7b96ea74f28aa0418bcb09fa3ea5ea12018d4cac92c6a8af17e1a56393b1fb56bc776811fa07695226164fdd656ed8edd8a1ae19c0e066f54f9
416e376a6168b9ed2bb5a5f5adb979b1cdce5e40f2184197bba6526857c2c92e47d0104d754f92a50dd8222f65be35e0c95b73d2f3bfac85fd60d80887955a27
1c57826650ab74c27eb3d20fc3667d1cd66ba341e31514161927f530bbb19fc00506dde4f7f67a7cefee3ed9ded1dc99b3a4caf4dd7c5513d777f7f5c6e1bb7b
8f40d2f9b2d598749bdd41abd26df627956034e854bac3d6a0326a0ddba3c9681876ba9357be77a1c141bf390c5ae34ea5551f0e2b41aba6e877ba9576d068f4
8376bf330efaaff23606569ea58fdc16605ecdebde7f010000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d65
2f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d36
3f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e
3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d985
0528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c020000130000000000000000000000
0000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b00000000000000000000
000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c0000000000000000000000000019020000
7468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d0014000600080000002100b6f4679893070000c92000001600000000000000
000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b01000027000000
000000000000000000009d0a00007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000980b00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax376\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 9;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 1;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 2;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 3;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 4;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 5;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 6;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 7;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 8;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 header;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footer;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index heading;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of figures;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope return;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation reference;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 line number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 page number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote text;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of authorities;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 macro;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 toa heading;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 5;\lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Closing;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Signature;\lsdsemihidden1 \lsdunhideused1 \lsdpriority1 \lsdlocked0 Default Paragraph Font;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Message Header;\lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Salutation;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Date;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Note Heading;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Block Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 FollowedHyperlink;\lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;
\lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Document Map;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Plain Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 E-mail Signature;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Top of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Bottom of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal (Web);\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Acronym;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Cite;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Code;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Definition;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Keyboard;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Preformatted;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Sample;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Typewriter;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Variable;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation subject;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 No List;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Balloon Text;\lsdpriority39 \lsdlocked0 Table Grid;
\lsdsemihidden1 \lsdlocked0 Placeholder Text;\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdpriority60 \lsdlocked0 Light Shading;\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;
\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdpriority65 \lsdlocked0 Medium List 1;\lsdpriority66 \lsdlocked0 Medium List 2;\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;\lsdpriority71 \lsdlocked0 Colorful Shading;\lsdpriority72 \lsdlocked0 Colorful List;\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;
\lsdsemihidden1 \lsdlocked0 Revision;\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;
\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdpriority62 \lsdlocked0 Light Grid Accent 3;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;
\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdpriority62 \lsdlocked0 Light Grid Accent 5;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Mention;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Smart Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hashtag;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Unresolved Mention;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Smart Link;}}{\*\datastore 01050000
02000000180000004d73786d6c322e534158584d4c5265616465722e362e30000000000000000000000e0000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff04000000feffffff05000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff010000000c6ad98892f1d411a65f0040963251e5000000000000000000000000a0c0
c64c508bdb0103000000c0020000000000004d0073006f004400610074006100530074006f0072006500000000000000000000000000000000000000000000000000000000000000000000000000000000001a000101ffffffffffffffff020000000000000000000000000000000000000000000000a0c0c64c508bdb01
a0c0c64c508bdb010000000000000000000000005300dd005000c900da004a00dd00c4004600c400ce004900c2005800db00db004c00d30034003200570041003d003d000000000000000000000000000000000032000101ffffffffffffffff030000000000000000000000000000000000000000000000a0c0c64c508b
db01a0c0c64c508bdb010000000000000000000000004900740065006d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffff04000000ffffffff000000000000000000000000000000000000000000000000
00000000000000000000000000000000210100000000000001000000020000000300000004000000feffffff060000000700000008000000090000000a000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3c3f786d6c2076657273696f6e3d22312e3022207374616e64616c6f6e653d226e6f223f3e3c623a536f757263657320786d6c6e733a623d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f6f6666
696365446f63756d656e742f323030362f6269626c696f6772617068792220786d6c6e733d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f6f6666696365446f63756d656e742f323030362f6269626c696f677261706879222053656c65637465645374796c653d225c41504153
6978746845646974696f6e4f66666963654f6e6c696e652e78736c22205374796c654e616d653d22415041222056657273696f6e3d2236223e3c2f623a536f75726365733e000000000000000000000000000000000000000000000000000000000000003c3f786d6c2076657273696f6e3d22312e302220656e636f6469
6e673d225554462d3822207374616e64616c6f6e653d226e6f223f3e0d0a3c64733a6461746173746f72654974656d2064733a6974656d49443d227b45384539443334422d363439462d344231362d383838392d3745464232463337394335387d2220786d6c6e733a64733d22687474703a2f2f736368656d61732e6f70
656e786d6c666f726d6174732e6f72672f6f6666696365446f63756d656e742f323030362f637573500072006f007000650072007400690065007300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000200ffffffffffffffffffffffff000000000000
0000000000000000000000000000000000000000000000000000000000000500000055010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000746f6d586d6c223e3c64733a736368656d61526566733e3c64733a736368656d615265662064733a7572693d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f7267
2f6f6666696365446f63756d656e742f323030362f6269626c696f677261706879222f3e3c2f64733a736368656d61526566733e3c2f64733a6461746173746f72654974656d3e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000105000000000000}}